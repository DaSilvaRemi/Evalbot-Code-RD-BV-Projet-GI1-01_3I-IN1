


ARM Macro Assembler    Page 1 


    1 00000000 011A49A0 
                       TEMPS_X EQU              0x11A49A0
    2 00000000 011A49A0 
                       TEMPS_Y EQU              0x11A49A0
    3 00000000         
    4 00000000                 AREA             _MAIN_PROGRAM_, CODE, READONLY
    5 00000000                 ENTRY
    6 00000000                 EXPORT           __main
    7 00000000         
    8 00000000         ;----------------------------------------IMPORT---------
                       ---------------------------------------;
    9 00000000         ;----------------------ENGINE-----------------;
   10 00000000                 IMPORT           __ENGINE_INIT ; init engine (co
                                                            nfigure pwms + GPIO
                                                            )
   11 00000000                 IMPORT           __ENGINE_RIGHT_ON ; activate ri
                                                            ght engine
   12 00000000                 IMPORT           __ENGINE_RIGHT_OFF ; desactivat
                                                            e right engine
   13 00000000                 IMPORT           __ENGINE_RIGHT_FRONT ; right  e
                                                            ngine go forward
   14 00000000                 IMPORT           __ENGINE_RIGHT_BACK ; right eng
                                                            ine go backward
   15 00000000                 IMPORT           __ENGINE_RIGHT_INVERSE ; invers
                                                            e rotation directio
                                                            n of roght engine
   16 00000000                 IMPORT           __ENGINE_LEFT_ON ; activate lef
                                                            t engine
   17 00000000                 IMPORT           __ENGINE_LEFT_OFF ; desactivate
                                                             left engine
   18 00000000                 IMPORT           __ENGINE_LEFT_FRONT ; left  eng
                                                            ine go forward
   19 00000000                 IMPORT           __ENGINE_LEFT_BACK ; left  engi
                                                            ne go backward
   20 00000000                 IMPORT           __ENGINE_LEFT_INVERSE ; inverse
                                                             rotation direction
                                                             of left engine
   21 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_ON ; activa
                                                            te right and left e
                                                            ngine
   22 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_OFF ; desac
                                                            tivate right and le
                                                            ft engine
   23 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_FRONT ; lef
                                                            t and right  engine
                                                             go forward
   24 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_BACK ; left
                                                             and right  engine 
                                                            go backward
   25 00000000                 IMPORT           __ENGINE_LEFT_BACK_RIGHT_FRONT 
                                                            ; left engine go ba
                                                            ckward and right  e
                                                            ngine go frontward
   26 00000000                 IMPORT           __ENGINE_LEFT_FRONT_RIGHT_BACK 
                                                            ; left engine go fr
                                                            ontward and right  
                                                            engine go backward
   27 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_INVERSE ; i
                                                            nverse rotation dir



ARM Macro Assembler    Page 2 


                                                            ection of right & l
                                                            eft engine
   28 00000000         
   29 00000000         ;----------------------SWITCH-----------------;
   30 00000000                 IMPORT           __CONFIG_SW ; configure SW (con
                                                            figure pwms + GPIO)
                                                            
   31 00000000                 IMPORT           __READ_STATE_SW_1 
                                                            ;Read state of SW1
   32 00000000                 IMPORT           __READ_STATE_SW_2 
                                                            ;Read state of SW2
   33 00000000         
   34 00000000         ;----------------------BUMPER-----------------;
   35 00000000                 IMPORT           __CONFIG_BUMPER ; configure Bum
                                                            per (configure pwms
                                                             + GPIO)
   36 00000000                 IMPORT           __READ_STATE_BUMPER_1 ;Read sta
                                                            te of Bumper 1
   37 00000000                 IMPORT           __READ_STATE_BUMPER_2 ;Read sta
                                                            te of Bumper 2
   38 00000000         
   39 00000000         ;----------------------LED-----------------;
   40 00000000                 IMPORT           __CONFIG_LED ; configure Led (c
                                                            onfigure pwms + GPI
                                                            O)
   41 00000000                 IMPORT           __SWITCH_ON_LED_1 
                                                            ;Switch on LED1
   42 00000000                 IMPORT           __SWITCH_ON_LED_2 
                                                            ;Switch off LED2
   43 00000000                 IMPORT           __SWITCH_ON_LED_1_2 ;Switch off
                                                             LED1 1 & 2
   44 00000000                 IMPORT           __SWITCH_OFF_LED_1 
                                                            ;Switch on LED2
   45 00000000                 IMPORT           __SWITCH_OFF_LED_2 
                                                            ;Switch off LED2
   46 00000000                 IMPORT           __SWITCH_OFF_LED_1_2 ;Switch of
                                                            f LED1 1 & 2
   47 00000000                 IMPORT           __BLINK_LED_1_2 
                                                            ;Blink LED 1 & 2
   48 00000000         
   49 00000000         ;----------------------TOOLS-----------------;
   50 00000000                 IMPORT           __WAIT_HALF_ROTATION
   51 00000000                 IMPORT           __WAIT_A_TIME
   52 00000000         
   53 00000000         ;----------------------------------------START MAIN-----
                       -------------------------------------------;
   54 00000000         
   55 00000000         __main
   56 00000000 F000 F810       BL               __INIT_START
   57 00000004 F7FF FFFE       BL               __CONFIG_BUMPER
   58 00000008         
   59 00000008         start_while_is_start_wall
   60 00000008 F7FF FFFE       BL               __READ_STATE_BUMPER_1
   61 0000000C D002            BEQ              end_while_is_start_wall
   62 0000000E         
   63 0000000E F7FF FFFE       BL               __READ_STATE_BUMPER_2
   64 00000012 D1F9            BNE              start_while_is_start_wall
   65 00000014         
   66 00000014         end_while_is_start_wall



ARM Macro Assembler    Page 3 


   67 00000014 F000 F82C       BL               __WHILE_IS_NOT_END_WALL
   68 00000018         
   69 00000018 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_OFF
   70 0000001C         
   71 0000001C         sw1
   72 0000001C F7FF FFFE       BL               __READ_STATE_SW_1
   73 00000020 D1FC            BNE              sw1
   74 00000022         
   75 00000022         
   76 00000022         
   77 00000022 E06E            B                end_p
   78 00000024         
   79 00000024         ;----------------------------------------END MAIN-------
                       -----------------------------------------;
   80 00000024         
   81 00000024         ;----------------------------------------START INIT STAR
                       T------------------------------------------------;
   82 00000024         
   83 00000024         __INIT_START
   84 00000024 E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
   85 00000028         
   86 00000028 F7FF FFFE       BL               __ENGINE_INIT
   87 0000002C F7FF FFFE       BL               __CONFIG_SW
   88 00000030         
   89 00000030         sw2
   90 00000030 F7FF FFFE       BL               __READ_STATE_SW_2
   91 00000034 D1FC            BNE              sw2
   92 00000036         
   93 00000036 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_ON
   94 0000003A F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
   95 0000003E         
   96 0000003E E8BD 9C41       POP              { R0, R6, R10-R12, PC }
   97 00000042         
   98 00000042         ;----------------------------------------END INIT START-
                       -----------------------------------------------;
   99 00000042         
  100 00000042         ;----------------------------------------START INIT AFTE
                       R SW2------------------------------------------------;
  101 00000042         
  102 00000042         __INIT_AFTER_SW2
  103 00000042 4A30            LDR              R2, =TEMPS_X
  104 00000044 4B2F            LDR              R3, =TEMPS_Y
  105 00000046 F04F 0700       LDR              R7, =2_00000000
  106 0000004A 4770            BX               LR
  107 0000004C         
  108 0000004C         ;----------------------------------------END INIT AFTER 
                       SW2------------------------------------------------;
  109 0000004C         
  110 0000004C         ;----------------------------------------START TURN 90 R
                       IGHT------------------------------------------------;
  111 0000004C         
  112 0000004C         __TURN_90_RIGHT
  113 0000004C B543            PUSH             { R0, R1, R6, LR }
  114 0000004E F7FF FFFE       BL               __ENGINE_LEFT_FRONT_RIGHT_BACK
  115 00000052 F7FF FFFE       BL               __WAIT_HALF_ROTATION
  116 00000056 BD43            POP              { R0, R1, R6, PC }
  117 00000058         
  118 00000058         ;----------------------------------------END TURN 90 RIG
                       HT------------------------------------------------;



ARM Macro Assembler    Page 4 


  119 00000058         
  120 00000058         ;----------------------------------------START TURN 90 L
                       EFT------------------------------------------------;
  121 00000058         
  122 00000058         __TURN_90_LEFT
  123 00000058 B543            PUSH             { R0, R1, R6, LR }
  124 0000005A F7FF FFFE       BL               __ENGINE_LEFT_BACK_RIGHT_FRONT
  125 0000005E F7FF FFFE       BL               __WAIT_HALF_ROTATION
  126 00000062 BD43            POP              { R0, R1, R6, PC }
  127 00000064         
  128 00000064         ;----------------------------------------END TURN 90 LEF
                       T------------------------------------------------;
  129 00000064         
  130 00000064         
  131 00000064         ;----------------------------------------START TURN_ARRO
                       UND------------------------------------------------;
  132 00000064         
  133 00000064         __TURN_ARROUND
  134 00000064 B543            PUSH             { R0, R1, R6, LR }
  135 00000066 F7FF FFF1       BL               __TURN_90_RIGHT
  136 0000006A F7FF FFEF       BL               __TURN_90_RIGHT
  137 0000006E BD43            POP              { R0, R1, R6, PC }
  138 00000070         
  139 00000070         ;----------------------------------------END TURN_ARROUN
                       D------------------------------------------------;
  140 00000070         
  141 00000070         ;----------------------------------------START WHILE IS 
                       NOT END WALL--------------------------------------------
                       ----;
  142 00000070         
  143 00000070         __WHILE_IS_NOT_END_WALL
  144 00000070 E92D 47FF       PUSH             { R0-R10, LR }
  145 00000074         init_startup_while_var
  146 00000074 F7FF FFE5       BL               __INIT_AFTER_SW2
  147 00000078 F04F 0400       LDR              R4, =0
  148 0000007C F04F 0501       LDR              R5, =2_00000001
  149 00000080         
  150 00000080         start_while_is_not_end_wall
  151 00000080         
  152 00000080         move_to_the_left
  153 00000080 F7FF FFF0       BL               __TURN_ARROUND
  154 00000084 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  155 00000088         
  156 00000088         wait_to_be_outside_range_Y_DOWN
  157 00000088 4619            MOV              R1, R3
  158 0000008A F7FF FFFE       BL               __WAIT_A_TIME
  159 0000008E         
  160 0000008E F7FF FFE3       BL               __TURN_90_LEFT
  161 00000092 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  162 00000096         
  163 00000096         wait_to_be_outside_range_X
  164 00000096 4611            MOV              R1, R2
  165 00000098 F7FF FFFE       BL               __WAIT_A_TIME
  166 0000009C         end_wall_is_bumped
  167 0000009C F7FF FFFE       BL               __READ_STATE_BUMPER_1
  168 000000A0 D017            BEQ              end_while_is_not_end_wall
  169 000000A2         
  170 000000A2 F7FF FFFE       BL               __READ_STATE_BUMPER_2
  171 000000A6 D014            BEQ              end_while_is_not_end_wall



ARM Macro Assembler    Page 5 


  172 000000A8         move_to_the_up
  173 000000A8 F7FF FFD6       BL               __TURN_90_LEFT
  174 000000AC F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  175 000000B0         
  176 000000B0         wait_to_be_outside_range_Y_UP
  177 000000B0 4619            MOV              R1, R3
  178 000000B2 F7FF FFFE       BL               __WAIT_A_TIME
  179 000000B6         
  180 000000B6         basic_wall_is_bumped
  181 000000B6 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  182 000000BA D003            BEQ              save_1_binary
  183 000000BC         
  184 000000BC F7FF FFFE       BL               __READ_STATE_BUMPER_2
  185 000000C0 D000            BEQ              save_1_binary
  186 000000C2 E001            B                shift_binary_mask
  187 000000C4         
  188 000000C4         save_1_binary
  189 000000C4 EA45 0707       ORR              R7, R5, R7
  190 000000C8         
  191 000000C8         shift_binary_mask
  192 000000C8 FA05 F504       LSL              R5, R5, R4
  193 000000CC F104 0401       ADD              R4, #1
  194 000000D0 E7D6            B                start_while_is_not_end_wall
  195 000000D2         
  196 000000D2         end_while_is_not_end_wall
  197 000000D2 E8BD 85FF       POP              { R0-R8, R10, PC }
  198 000000D6         
  199 000000D6         ;----------------------------------------END WHILE IS NO
                       T END WALL----------------------------------------------
                       --;
  200 000000D6         
  201 000000D6         ;----------------------------------------START DISPLAY_B
                       INARY_MSG-----------------------------------------------
                       -;
  202 000000D6         
  203 000000D6         __DISPLAY_BINARY_MSG
  204 000000D6 B59C            PUSH             { R2-R4, R7, LR }
  205 000000D8 F04F 0300       LDR              R3, =0
  206 000000DC         start_while_binary_msg
  207 000000DC 2B07            CMP              R3, #7
  208 000000DE D00F            BEQ              end_while_binary_msg
  209 000000E0         
  210 000000E0 F007 0201       AND              R2, R7, #2_00000001
  211 000000E4         
  212 000000E4 2A01            CMP              R2, #1
  213 000000E6 BF08 F7FF 
              FFFE             BLEQ             __SWITCH_ON_LED_1
  214 000000EC         
  215 000000EC 2A00            CMP              R2, #0
  216 000000EE BF08 F7FF 
              FFFE             BLEQ             __SWITCH_ON_LED_2
  217 000000F4         
  218 000000F4 F7FF FFFE       BL               __SWITCH_OFF_LED_1_2
  219 000000F8         
  220 000000F8 F103 0301       ADD              R3, #1
  221 000000FC FA27 F703       LSR              R7, R3
  222 00000100         
  223 00000100         end_while_binary_msg
  224 00000100 BD80            POP              { R7, PC }



ARM Macro Assembler    Page 6 


  225 00000102         
  226 00000102         ;----------------------------------------END DISPLAY_BIN
                       ARY_MSG------------------------------------------------;
                       
  227 00000102         
  228 00000102         end_p
  229 00000102                 END
              00 00 011A49A0 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rd_bv_main.d -o.\objects\rd_bv_main.o -I.\RTE\_Target_1 
-ID:\ProgramFiles\Armv52\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\ProgramFiles\A
rmv52\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="A
RMCM3 SETA 1" --list=.\listings\rd_bv_main.lst RD_BV_MAIN.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

_MAIN_PROGRAM_ 00000000

Symbol: _MAIN_PROGRAM_
   Definitions
      At line 4 in file RD_BV_MAIN.s
   Uses
      None
Comment: _MAIN_PROGRAM_ unused
__DISPLAY_BINARY_MSG 000000D6

Symbol: __DISPLAY_BINARY_MSG
   Definitions
      At line 203 in file RD_BV_MAIN.s
   Uses
      None
Comment: __DISPLAY_BINARY_MSG unused
__INIT_AFTER_SW2 00000042

Symbol: __INIT_AFTER_SW2
   Definitions
      At line 102 in file RD_BV_MAIN.s
   Uses
      At line 146 in file RD_BV_MAIN.s
Comment: __INIT_AFTER_SW2 used once
__INIT_START 00000024

Symbol: __INIT_START
   Definitions
      At line 83 in file RD_BV_MAIN.s
   Uses
      At line 56 in file RD_BV_MAIN.s
Comment: __INIT_START used once
__TURN_90_LEFT 00000058

Symbol: __TURN_90_LEFT
   Definitions
      At line 122 in file RD_BV_MAIN.s
   Uses
      At line 160 in file RD_BV_MAIN.s
      At line 173 in file RD_BV_MAIN.s

__TURN_90_RIGHT 0000004C

Symbol: __TURN_90_RIGHT
   Definitions
      At line 112 in file RD_BV_MAIN.s
   Uses
      At line 135 in file RD_BV_MAIN.s
      At line 136 in file RD_BV_MAIN.s

__TURN_ARROUND 00000064

Symbol: __TURN_ARROUND
   Definitions
      At line 133 in file RD_BV_MAIN.s
   Uses
      At line 153 in file RD_BV_MAIN.s
Comment: __TURN_ARROUND used once
__WHILE_IS_NOT_END_WALL 00000070



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: __WHILE_IS_NOT_END_WALL
   Definitions
      At line 143 in file RD_BV_MAIN.s
   Uses
      At line 67 in file RD_BV_MAIN.s
Comment: __WHILE_IS_NOT_END_WALL used once
__main 00000000

Symbol: __main
   Definitions
      At line 55 in file RD_BV_MAIN.s
   Uses
      At line 6 in file RD_BV_MAIN.s
Comment: __main used once
basic_wall_is_bumped 000000B6

Symbol: basic_wall_is_bumped
   Definitions
      At line 180 in file RD_BV_MAIN.s
   Uses
      None
Comment: basic_wall_is_bumped unused
end_p 00000102

Symbol: end_p
   Definitions
      At line 228 in file RD_BV_MAIN.s
   Uses
      At line 77 in file RD_BV_MAIN.s
Comment: end_p used once
end_wall_is_bumped 0000009C

Symbol: end_wall_is_bumped
   Definitions
      At line 166 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_wall_is_bumped unused
end_while_binary_msg 00000100

Symbol: end_while_binary_msg
   Definitions
      At line 223 in file RD_BV_MAIN.s
   Uses
      At line 208 in file RD_BV_MAIN.s
Comment: end_while_binary_msg used once
end_while_is_not_end_wall 000000D2

Symbol: end_while_is_not_end_wall
   Definitions
      At line 196 in file RD_BV_MAIN.s
   Uses
      At line 168 in file RD_BV_MAIN.s
      At line 171 in file RD_BV_MAIN.s

end_while_is_start_wall 00000014

Symbol: end_while_is_start_wall



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 66 in file RD_BV_MAIN.s
   Uses
      At line 61 in file RD_BV_MAIN.s
Comment: end_while_is_start_wall used once
init_startup_while_var 00000074

Symbol: init_startup_while_var
   Definitions
      At line 145 in file RD_BV_MAIN.s
   Uses
      None
Comment: init_startup_while_var unused
move_to_the_left 00000080

Symbol: move_to_the_left
   Definitions
      At line 152 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_left unused
move_to_the_up 000000A8

Symbol: move_to_the_up
   Definitions
      At line 172 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_up unused
save_1_binary 000000C4

Symbol: save_1_binary
   Definitions
      At line 188 in file RD_BV_MAIN.s
   Uses
      At line 182 in file RD_BV_MAIN.s
      At line 185 in file RD_BV_MAIN.s

shift_binary_mask 000000C8

Symbol: shift_binary_mask
   Definitions
      At line 191 in file RD_BV_MAIN.s
   Uses
      At line 186 in file RD_BV_MAIN.s
Comment: shift_binary_mask used once
start_while_binary_msg 000000DC

Symbol: start_while_binary_msg
   Definitions
      At line 206 in file RD_BV_MAIN.s
   Uses
      None
Comment: start_while_binary_msg unused
start_while_is_not_end_wall 00000080

Symbol: start_while_is_not_end_wall
   Definitions
      At line 150 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 194 in file RD_BV_MAIN.s
Comment: start_while_is_not_end_wall used once
start_while_is_start_wall 00000008

Symbol: start_while_is_start_wall
   Definitions
      At line 59 in file RD_BV_MAIN.s
   Uses
      At line 64 in file RD_BV_MAIN.s
Comment: start_while_is_start_wall used once
sw1 0000001C

Symbol: sw1
   Definitions
      At line 71 in file RD_BV_MAIN.s
   Uses
      At line 73 in file RD_BV_MAIN.s
Comment: sw1 used once
sw2 00000030

Symbol: sw2
   Definitions
      At line 89 in file RD_BV_MAIN.s
   Uses
      At line 91 in file RD_BV_MAIN.s
Comment: sw2 used once
wait_to_be_outside_range_X 00000096

Symbol: wait_to_be_outside_range_X
   Definitions
      At line 163 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_X unused
wait_to_be_outside_range_Y_DOWN 00000088

Symbol: wait_to_be_outside_range_Y_DOWN
   Definitions
      At line 156 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_DOWN unused
wait_to_be_outside_range_Y_UP 000000B0

Symbol: wait_to_be_outside_range_Y_UP
   Definitions
      At line 176 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_UP unused
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TEMPS_X 011A49A0

Symbol: TEMPS_X
   Definitions
      At line 1 in file RD_BV_MAIN.s
   Uses
      At line 103 in file RD_BV_MAIN.s
Comment: TEMPS_X used once
TEMPS_Y 011A49A0

Symbol: TEMPS_Y
   Definitions
      At line 2 in file RD_BV_MAIN.s
   Uses
      At line 104 in file RD_BV_MAIN.s
Comment: TEMPS_Y used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__BLINK_LED_1_2 00000000

Symbol: __BLINK_LED_1_2
   Definitions
      At line 47 in file RD_BV_MAIN.s
   Uses
      None
Comment: __BLINK_LED_1_2 unused
__CONFIG_BUMPER 00000000

Symbol: __CONFIG_BUMPER
   Definitions
      At line 35 in file RD_BV_MAIN.s
   Uses
      At line 57 in file RD_BV_MAIN.s
Comment: __CONFIG_BUMPER used once
__CONFIG_LED 00000000

Symbol: __CONFIG_LED
   Definitions
      At line 40 in file RD_BV_MAIN.s
   Uses
      None
Comment: __CONFIG_LED unused
__CONFIG_SW 00000000

Symbol: __CONFIG_SW
   Definitions
      At line 30 in file RD_BV_MAIN.s
   Uses
      At line 87 in file RD_BV_MAIN.s
Comment: __CONFIG_SW used once
__ENGINE_INIT 00000000

Symbol: __ENGINE_INIT
   Definitions
      At line 10 in file RD_BV_MAIN.s
   Uses
      At line 86 in file RD_BV_MAIN.s
Comment: __ENGINE_INIT used once
__ENGINE_LEFT_BACK 00000000

Symbol: __ENGINE_LEFT_BACK
   Definitions
      At line 19 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_BACK unused
__ENGINE_LEFT_BACK_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_BACK_RIGHT_FRONT
   Definitions
      At line 25 in file RD_BV_MAIN.s
   Uses
      At line 124 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_BACK_RIGHT_FRONT used once
__ENGINE_LEFT_FRONT 00000000

Symbol: __ENGINE_LEFT_FRONT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 18 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_FRONT unused
__ENGINE_LEFT_FRONT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_FRONT_RIGHT_BACK
   Definitions
      At line 26 in file RD_BV_MAIN.s
   Uses
      At line 114 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_FRONT_RIGHT_BACK used once
__ENGINE_LEFT_INVERSE 00000000

Symbol: __ENGINE_LEFT_INVERSE
   Definitions
      At line 20 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_INVERSE unused
__ENGINE_LEFT_OFF 00000000

Symbol: __ENGINE_LEFT_OFF
   Definitions
      At line 17 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_OFF unused
__ENGINE_LEFT_ON 00000000

Symbol: __ENGINE_LEFT_ON
   Definitions
      At line 16 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_ON unused
__ENGINE_LEFT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_RIGHT_BACK
   Definitions
      At line 24 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_BACK unused
__ENGINE_LEFT_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_RIGHT_FRONT
   Definitions
      At line 23 in file RD_BV_MAIN.s
   Uses
      At line 94 in file RD_BV_MAIN.s
      At line 154 in file RD_BV_MAIN.s
      At line 161 in file RD_BV_MAIN.s
      At line 174 in file RD_BV_MAIN.s

__ENGINE_LEFT_RIGHT_INVERSE 00000000

Symbol: __ENGINE_LEFT_RIGHT_INVERSE



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

   Definitions
      At line 27 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_INVERSE unused
__ENGINE_LEFT_RIGHT_OFF 00000000

Symbol: __ENGINE_LEFT_RIGHT_OFF
   Definitions
      At line 22 in file RD_BV_MAIN.s
   Uses
      At line 69 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_OFF used once
__ENGINE_LEFT_RIGHT_ON 00000000

Symbol: __ENGINE_LEFT_RIGHT_ON
   Definitions
      At line 21 in file RD_BV_MAIN.s
   Uses
      At line 93 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_ON used once
__ENGINE_RIGHT_BACK 00000000

Symbol: __ENGINE_RIGHT_BACK
   Definitions
      At line 14 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_BACK unused
__ENGINE_RIGHT_FRONT 00000000

Symbol: __ENGINE_RIGHT_FRONT
   Definitions
      At line 13 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_FRONT unused
__ENGINE_RIGHT_INVERSE 00000000

Symbol: __ENGINE_RIGHT_INVERSE
   Definitions
      At line 15 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_INVERSE unused
__ENGINE_RIGHT_OFF 00000000

Symbol: __ENGINE_RIGHT_OFF
   Definitions
      At line 12 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_OFF unused
__ENGINE_RIGHT_ON 00000000

Symbol: __ENGINE_RIGHT_ON
   Definitions
      At line 11 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      None
Comment: __ENGINE_RIGHT_ON unused
__READ_STATE_BUMPER_1 00000000

Symbol: __READ_STATE_BUMPER_1
   Definitions
      At line 36 in file RD_BV_MAIN.s
   Uses
      At line 60 in file RD_BV_MAIN.s
      At line 167 in file RD_BV_MAIN.s
      At line 181 in file RD_BV_MAIN.s

__READ_STATE_BUMPER_2 00000000

Symbol: __READ_STATE_BUMPER_2
   Definitions
      At line 37 in file RD_BV_MAIN.s
   Uses
      At line 63 in file RD_BV_MAIN.s
      At line 170 in file RD_BV_MAIN.s
      At line 184 in file RD_BV_MAIN.s

__READ_STATE_SW_1 00000000

Symbol: __READ_STATE_SW_1
   Definitions
      At line 31 in file RD_BV_MAIN.s
   Uses
      At line 72 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_1 used once
__READ_STATE_SW_2 00000000

Symbol: __READ_STATE_SW_2
   Definitions
      At line 32 in file RD_BV_MAIN.s
   Uses
      At line 90 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_2 used once
__SWITCH_OFF_LED_1 00000000

Symbol: __SWITCH_OFF_LED_1
   Definitions
      At line 44 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_OFF_LED_1 unused
__SWITCH_OFF_LED_1_2 00000000

Symbol: __SWITCH_OFF_LED_1_2
   Definitions
      At line 46 in file RD_BV_MAIN.s
   Uses
      At line 218 in file RD_BV_MAIN.s
Comment: __SWITCH_OFF_LED_1_2 used once
__SWITCH_OFF_LED_2 00000000

Symbol: __SWITCH_OFF_LED_2
   Definitions
      At line 45 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: __SWITCH_OFF_LED_2 unused
__SWITCH_ON_LED_1 00000000

Symbol: __SWITCH_ON_LED_1
   Definitions
      At line 41 in file RD_BV_MAIN.s
   Uses
      At line 213 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_1 used once
__SWITCH_ON_LED_1_2 00000000

Symbol: __SWITCH_ON_LED_1_2
   Definitions
      At line 43 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_1_2 unused
__SWITCH_ON_LED_2 00000000

Symbol: __SWITCH_ON_LED_2
   Definitions
      At line 42 in file RD_BV_MAIN.s
   Uses
      At line 216 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_2 used once
__WAIT_A_TIME 00000000

Symbol: __WAIT_A_TIME
   Definitions
      At line 51 in file RD_BV_MAIN.s
   Uses
      At line 158 in file RD_BV_MAIN.s
      At line 165 in file RD_BV_MAIN.s
      At line 178 in file RD_BV_MAIN.s

__WAIT_HALF_ROTATION 00000000

Symbol: __WAIT_HALF_ROTATION
   Definitions
      At line 50 in file RD_BV_MAIN.s
   Uses
      At line 115 in file RD_BV_MAIN.s
      At line 125 in file RD_BV_MAIN.s

34 symbols
400 symbols in table
