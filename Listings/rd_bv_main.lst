


ARM Macro Assembler    Page 1 


    1 00000000 0121EAC0 
                       TEMPS_X EQU              0x121EAC0
    2 00000000 011A49A0 
                       TEMPS_Y EQU              0x11A49A0
    3 00000000         
    4 00000000                 AREA             _MAIN_PROGRAM_, CODE, READONLY
    5 00000000                 ENTRY
    6 00000000                 EXPORT           __main
    7 00000000         
    8 00000000         ;----------------------------------------IMPORT---------
                       ---------------------------------------;
    9 00000000         ;----------------------ENGINE-----------------;
   10 00000000                 IMPORT           __ENGINE_INIT ; init engine (co
                                                            nfigure pwms + GPIO
                                                            )
   11 00000000                 IMPORT           __ENGINE_RIGHT_ON ; activate ri
                                                            ght engine
   12 00000000                 IMPORT           __ENGINE_RIGHT_OFF ; desactivat
                                                            e right engine
   13 00000000                 IMPORT           __ENGINE_RIGHT_FRONT ; right  e
                                                            ngine go forward
   14 00000000                 IMPORT           __ENGINE_RIGHT_BACK ; right eng
                                                            ine go backward
   15 00000000                 IMPORT           __ENGINE_RIGHT_INVERSE ; invers
                                                            e rotation directio
                                                            n of roght engine
   16 00000000                 IMPORT           __ENGINE_LEFT_ON ; activate lef
                                                            t engine
   17 00000000                 IMPORT           __ENGINE_LEFT_OFF ; desactivate
                                                             left engine
   18 00000000                 IMPORT           __ENGINE_LEFT_FRONT ; left  eng
                                                            ine go forward
   19 00000000                 IMPORT           __ENGINE_LEFT_BACK ; left  engi
                                                            ne go backward
   20 00000000                 IMPORT           __ENGINE_LEFT_INVERSE ; inverse
                                                             rotation direction
                                                             of left engine
   21 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_ON ; activa
                                                            te right and left e
                                                            ngine
   22 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_OFF ; desac
                                                            tivate right and le
                                                            ft engine
   23 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_FRONT ; lef
                                                            t and right  engine
                                                             go forward
   24 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_BACK ; left
                                                             and right  engine 
                                                            go backward
   25 00000000                 IMPORT           __ENGINE_LEFT_BACK_RIGHT_FRONT 
                                                            ; left engine go ba
                                                            ckward and right  e
                                                            ngine go frontward
   26 00000000                 IMPORT           __ENGINE_LEFT_FRONT_RIGHT_BACK 
                                                            ; left engine go fr
                                                            ontward and right  
                                                            engine go backward
   27 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_INVERSE ; i
                                                            nverse rotation dir



ARM Macro Assembler    Page 2 


                                                            ection of right & l
                                                            eft engine
   28 00000000         
   29 00000000         ;----------------------SWITCH-----------------;
   30 00000000                 IMPORT           __CONFIG_SW ; configure SW (con
                                                            figure pwms + GPIO)
                                                            
   31 00000000                 IMPORT           __READ_STATE_SW_1 
                                                            ;Read state of SW1
   32 00000000                 IMPORT           __READ_STATE_SW_2 
                                                            ;Read state of SW2
   33 00000000         
   34 00000000         ;----------------------BUMPER-----------------;
   35 00000000                 IMPORT           __CONFIG_BUMPER ; configure Bum
                                                            per (configure pwms
                                                             + GPIO)
   36 00000000                 IMPORT           __READ_STATE_BUMPER_1 ;Read sta
                                                            te of Bumper 1
   37 00000000                 IMPORT           __READ_STATE_BUMPER_2 ;Read sta
                                                            te of Bumper 2
   38 00000000         
   39 00000000         ;----------------------LED-----------------;
   40 00000000                 IMPORT           __CONFIG_LED ; configure Led (c
                                                            onfigure pwms + GPI
                                                            O)
   41 00000000                 IMPORT           __SWITCH_ON_LED_1 
                                                            ;Switch on LED1
   42 00000000                 IMPORT           __SWITCH_ON_LED_2 
                                                            ;Switch off LED2
   43 00000000                 IMPORT           __SWITCH_ON_LED_1_2 ;Switch off
                                                             LED1 1 & 2
   44 00000000                 IMPORT           __SWITCH_OFF_LED_1 
                                                            ;Switch on LED2
   45 00000000                 IMPORT           __SWITCH_OFF_LED_2 
                                                            ;Switch off LED2
   46 00000000                 IMPORT           __SWITCH_OFF_LED_1_2 ;Switch of
                                                            f LED1 1 & 2
   47 00000000                 IMPORT           __BLINK_LED_1_2 
                                                            ;Blink LED 1 & 2
   48 00000000         
   49 00000000         ;----------------------OLED-----------------;
   50 00000000                 IMPORT           __CONFIG_0LED
   51 00000000                 IMPORT           __DISPLAY_BYTE_DATA
   52 00000000         
   53 00000000         ;----------------------TOOLS-----------------;
   54 00000000                 IMPORT           __WAIT
   55 00000000                 IMPORT           __WAIT_HALF_ROTATION
   56 00000000                 IMPORT           __WAIT_A_TIME
   57 00000000         
   58 00000000         ;----------------------------------------START MAIN-----
                       -------------------------------------------;
   59 00000000         
   60 00000000         __main
   61 00000000 F000 F816       BL               __INIT_START
   62 00000004 F7FF FFFE       BL               __CONFIG_BUMPER
   63 00000008         
   64 00000008         start_while_is_start_wall
   65 00000008 F7FF FFFE       BL               __READ_STATE_BUMPER_1
   66 0000000C D002            BEQ              end_while_is_start_wall



ARM Macro Assembler    Page 3 


   67 0000000E         
   68 0000000E F7FF FFFE       BL               __READ_STATE_BUMPER_2
   69 00000012 D1F9            BNE              start_while_is_start_wall
   70 00000014         
   71 00000014         end_while_is_start_wall
   72 00000014 F000 F832       BL               __WHILE_IS_NOT_END_WALL
   73 00000018         
   74 00000018 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_OFF
   75 0000001C F7FF FFFE       BL               __CONFIG_SW
   76 00000020 F7FF FFFE       BL               __CONFIG_LED
   77 00000024         sw1
   78 00000024 F7FF FFFE       BL               __READ_STATE_SW_1
   79 00000028 D1FC            BNE              sw1
   80 0000002A         
   81 0000002A F000 F858       BL               __DISPLAY_BINARY_MSG
   82 0000002E         
   83 0000002E E7F9            B                sw1
   84 00000030         
   85 00000030         ;----------------------------------------END MAIN-------
                       -----------------------------------------;
   86 00000030         
   87 00000030         ;----------------------------------------START INIT STAR
                       T------------------------------------------------;
   88 00000030         
   89 00000030         __INIT_START
   90 00000030 E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
   91 00000034         
   92 00000034 F7FF FFFE       BL               __ENGINE_INIT
   93 00000038 F7FF FFFE       BL               __CONFIG_SW
   94 0000003C         
   95 0000003C         sw2
   96 0000003C F7FF FFFE       BL               __READ_STATE_SW_2
   97 00000040 D1FC            BNE              sw2
   98 00000042         
   99 00000042 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_ON
  100 00000046 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  101 0000004A         
  102 0000004A E8BD 9C41       POP              { R0, R6, R10-R12, PC }
  103 0000004E         
  104 0000004E         ;----------------------------------------END INIT START-
                       -----------------------------------------------;
  105 0000004E         
  106 0000004E         ;----------------------------------------START INIT AFTE
                       R SW2------------------------------------------------;
  107 0000004E         
  108 0000004E         __INIT_AFTER_SW2
  109 0000004E 4A31            LDR              R2, =TEMPS_X
  110 00000050 4B31            LDR              R3, =TEMPS_Y
  111 00000052 F04F 0700       LDR              R7, =2_00000000
  112 00000056 4770            BX               LR
  113 00000058         
  114 00000058         ;----------------------------------------END INIT AFTER 
                       SW2------------------------------------------------;
  115 00000058         
  116 00000058         ;----------------------------------------START TURN 90 R
                       IGHT------------------------------------------------;
  117 00000058         
  118 00000058         __TURN_90_RIGHT
  119 00000058 B543            PUSH             { R0, R1, R6, LR }



ARM Macro Assembler    Page 4 


  120 0000005A F7FF FFFE       BL               __ENGINE_LEFT_FRONT_RIGHT_BACK
  121 0000005E F7FF FFFE       BL               __WAIT_HALF_ROTATION
  122 00000062 BD43            POP              { R0, R1, R6, PC }
  123 00000064         
  124 00000064         ;----------------------------------------END TURN 90 RIG
                       HT------------------------------------------------;
  125 00000064         
  126 00000064         ;----------------------------------------START TURN 90 L
                       EFT------------------------------------------------;
  127 00000064         
  128 00000064         __TURN_90_LEFT
  129 00000064 B543            PUSH             { R0, R1, R6, LR }
  130 00000066 F7FF FFFE       BL               __ENGINE_LEFT_BACK_RIGHT_FRONT
  131 0000006A F7FF FFFE       BL               __WAIT_HALF_ROTATION
  132 0000006E BD43            POP              { R0, R1, R6, PC }
  133 00000070         
  134 00000070         ;----------------------------------------END TURN 90 LEF
                       T------------------------------------------------;
  135 00000070         
  136 00000070         
  137 00000070         ;----------------------------------------START TURN_ARRO
                       UND------------------------------------------------;
  138 00000070         
  139 00000070         __TURN_ARROUND
  140 00000070 B543            PUSH             { R0, R1, R6, LR }
  141 00000072 F7FF FFF1       BL               __TURN_90_RIGHT
  142 00000076 F7FF FFEF       BL               __TURN_90_RIGHT
  143 0000007A BD43            POP              { R0, R1, R6, PC }
  144 0000007C         
  145 0000007C         ;----------------------------------------END TURN_ARROUN
                       D------------------------------------------------;
  146 0000007C         
  147 0000007C         ;----------------------------------------START WHILE IS 
                       NOT END WALL--------------------------------------------
                       ----;
  148 0000007C         
  149 0000007C         __WHILE_IS_NOT_END_WALL
  150 0000007C E92D 47FF       PUSH             { R0-R10, LR }
  151 00000080         init_startup_while_var
  152 00000080 F7FF FFE5       BL               __INIT_AFTER_SW2
  153 00000084 F04F 0400       LDR              R4, =0
  154 00000088 F04F 0501       LDR              R5, =2_00000001
  155 0000008C         
  156 0000008C         start_while_is_not_end_wall
  157 0000008C         
  158 0000008C F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_BACK
  159 00000090         ;BL __TURN_ARROUND
  160 00000090         ;BL __ENGINE_LEFT_RIGHT_FRONT
  161 00000090         
  162 00000090         wait_to_be_outside_range_Y_DOWN
  163 00000090 4619            MOV              R1, R3
  164 00000092 F7FF FFFE       BL               __WAIT_A_TIME
  165 00000096         
  166 00000096         move_to_the_right
  167 00000096 F7FF FFDF       BL               __TURN_90_RIGHT
  168 0000009A F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  169 0000009E         
  170 0000009E         wait_to_be_outside_range_X
  171 0000009E 4611            MOV              R1, R2



ARM Macro Assembler    Page 5 


  172 000000A0 F7FF FFFE       BL               __WAIT_A_TIME
  173 000000A4         end_wall_is_bumped
  174 000000A4 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  175 000000A8 D017            BEQ              end_while_is_not_end_wall
  176 000000AA         
  177 000000AA F7FF FFFE       BL               __READ_STATE_BUMPER_2
  178 000000AE D014            BEQ              end_while_is_not_end_wall
  179 000000B0         move_to_the_up
  180 000000B0 F7FF FFD8       BL               __TURN_90_LEFT
  181 000000B4 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  182 000000B8         
  183 000000B8         wait_to_be_outside_range_Y_UP
  184 000000B8 4619            MOV              R1, R3
  185 000000BA F7FF FFFE       BL               __WAIT_A_TIME
  186 000000BE         
  187 000000BE         basic_wall_is_bumped
  188 000000BE F7FF FFFE       BL               __READ_STATE_BUMPER_1
  189 000000C2 D003            BEQ              save_1_binary
  190 000000C4         
  191 000000C4 F7FF FFFE       BL               __READ_STATE_BUMPER_2
  192 000000C8 D000            BEQ              save_1_binary
  193 000000CA E001            B                shift_binary_mask
  194 000000CC         
  195 000000CC         save_1_binary
  196 000000CC EA45 0707       ORR              R7, R5, R7
  197 000000D0         
  198 000000D0         shift_binary_mask
  199 000000D0 FA05 F504       LSL              R5, R5, R4
  200 000000D4 F104 0401       ADD              R4, #1
  201 000000D8 E7D8            B                start_while_is_not_end_wall
  202 000000DA         
  203 000000DA         end_while_is_not_end_wall
  204 000000DA E8BD 87FF       POP              { R0-R10, PC }
  205 000000DE         
  206 000000DE         ;----------------------------------------END WHILE IS NO
                       T END WALL----------------------------------------------
                       --;
  207 000000DE         
  208 000000DE         ;----------------------------------------START DISPLAY_B
                       INARY_MSG-----------------------------------------------
                       -;
  209 000000DE         
  210 000000DE         __DISPLAY_BINARY_MSG
  211 000000DE B5DF            PUSH             { R0-R4, R6, R7, LR }
  212 000000E0         
  213 000000E0 F04F 0300       LDR              R3, =0
  214 000000E4         start_while_binary_msg
  215 000000E4 2B07            CMP              R3, #7
  216 000000E6 D013            BEQ              end_while_binary_msg
  217 000000E8         
  218 000000E8 F007 0201       AND              R2, R7, #2_00000001
  219 000000EC         
  220 000000EC 2A01            CMP              R2, #1
  221 000000EE D001            BEQ              display_1
  222 000000F0         
  223 000000F0 2A00            CMP              R2, #0
  224 000000F2 D002            BEQ              display_0
  225 000000F4         
  226 000000F4         display_1



ARM Macro Assembler    Page 6 


  227 000000F4 F7FF FFFE       BL               __SWITCH_ON_LED_1
  228 000000F8 E001            B                end_display
  229 000000FA         
  230 000000FA         display_0
  231 000000FA F7FF FFFE       BL               __SWITCH_ON_LED_2
  232 000000FE         end_display
  233 000000FE F7FF FFFE       BL               __WAIT
  234 00000102 F7FF FFFE       BL               __SWITCH_OFF_LED_1_2
  235 00000106         
  236 00000106 F103 0301       ADD              R3, #1
  237 0000010A FA27 F703       LSR              R7, R3
  238 0000010E E7E9            B                start_while_binary_msg
  239 00000110         end_while_binary_msg
  240 00000110         
  241 00000110 BDDF            POP              { R0-R4, R6, R7, PC }
  242 00000112         
  243 00000112         ;----------------------------------------END DISPLAY_BIN
                       ARY_MSG------------------------------------------------;
                       
  244 00000112         
  245 00000112         end_p
  246 00000112                 END
              00 00 0121EAC0 
              011A49A0 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rd_bv_main.d -o.\objects\rd_bv_main.o -I.\RTE\_Target_1 
-ID:\ProgramFiles\Armv52\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\ProgramFiles\A
rmv52\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="A
RMCM3 SETA 1" --list=.\listings\rd_bv_main.lst RD_BV_MAIN.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

_MAIN_PROGRAM_ 00000000

Symbol: _MAIN_PROGRAM_
   Definitions
      At line 4 in file RD_BV_MAIN.s
   Uses
      None
Comment: _MAIN_PROGRAM_ unused
__DISPLAY_BINARY_MSG 000000DE

Symbol: __DISPLAY_BINARY_MSG
   Definitions
      At line 210 in file RD_BV_MAIN.s
   Uses
      At line 81 in file RD_BV_MAIN.s
Comment: __DISPLAY_BINARY_MSG used once
__INIT_AFTER_SW2 0000004E

Symbol: __INIT_AFTER_SW2
   Definitions
      At line 108 in file RD_BV_MAIN.s
   Uses
      At line 152 in file RD_BV_MAIN.s
Comment: __INIT_AFTER_SW2 used once
__INIT_START 00000030

Symbol: __INIT_START
   Definitions
      At line 89 in file RD_BV_MAIN.s
   Uses
      At line 61 in file RD_BV_MAIN.s
Comment: __INIT_START used once
__TURN_90_LEFT 00000064

Symbol: __TURN_90_LEFT
   Definitions
      At line 128 in file RD_BV_MAIN.s
   Uses
      At line 180 in file RD_BV_MAIN.s
Comment: __TURN_90_LEFT used once
__TURN_90_RIGHT 00000058

Symbol: __TURN_90_RIGHT
   Definitions
      At line 118 in file RD_BV_MAIN.s
   Uses
      At line 141 in file RD_BV_MAIN.s
      At line 142 in file RD_BV_MAIN.s
      At line 167 in file RD_BV_MAIN.s

__TURN_ARROUND 00000070

Symbol: __TURN_ARROUND
   Definitions
      At line 139 in file RD_BV_MAIN.s
   Uses
      None
Comment: __TURN_ARROUND unused
__WHILE_IS_NOT_END_WALL 0000007C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: __WHILE_IS_NOT_END_WALL
   Definitions
      At line 149 in file RD_BV_MAIN.s
   Uses
      At line 72 in file RD_BV_MAIN.s
Comment: __WHILE_IS_NOT_END_WALL used once
__main 00000000

Symbol: __main
   Definitions
      At line 60 in file RD_BV_MAIN.s
   Uses
      At line 6 in file RD_BV_MAIN.s
Comment: __main used once
basic_wall_is_bumped 000000BE

Symbol: basic_wall_is_bumped
   Definitions
      At line 187 in file RD_BV_MAIN.s
   Uses
      None
Comment: basic_wall_is_bumped unused
display_0 000000FA

Symbol: display_0
   Definitions
      At line 230 in file RD_BV_MAIN.s
   Uses
      At line 224 in file RD_BV_MAIN.s
Comment: display_0 used once
display_1 000000F4

Symbol: display_1
   Definitions
      At line 226 in file RD_BV_MAIN.s
   Uses
      At line 221 in file RD_BV_MAIN.s
Comment: display_1 used once
end_display 000000FE

Symbol: end_display
   Definitions
      At line 232 in file RD_BV_MAIN.s
   Uses
      At line 228 in file RD_BV_MAIN.s
Comment: end_display used once
end_p 00000112

Symbol: end_p
   Definitions
      At line 245 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_p unused
end_wall_is_bumped 000000A4

Symbol: end_wall_is_bumped
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 173 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_wall_is_bumped unused
end_while_binary_msg 00000110

Symbol: end_while_binary_msg
   Definitions
      At line 239 in file RD_BV_MAIN.s
   Uses
      At line 216 in file RD_BV_MAIN.s
Comment: end_while_binary_msg used once
end_while_is_not_end_wall 000000DA

Symbol: end_while_is_not_end_wall
   Definitions
      At line 203 in file RD_BV_MAIN.s
   Uses
      At line 175 in file RD_BV_MAIN.s
      At line 178 in file RD_BV_MAIN.s

end_while_is_start_wall 00000014

Symbol: end_while_is_start_wall
   Definitions
      At line 71 in file RD_BV_MAIN.s
   Uses
      At line 66 in file RD_BV_MAIN.s
Comment: end_while_is_start_wall used once
init_startup_while_var 00000080

Symbol: init_startup_while_var
   Definitions
      At line 151 in file RD_BV_MAIN.s
   Uses
      None
Comment: init_startup_while_var unused
move_to_the_right 00000096

Symbol: move_to_the_right
   Definitions
      At line 166 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_right unused
move_to_the_up 000000B0

Symbol: move_to_the_up
   Definitions
      At line 179 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_up unused
save_1_binary 000000CC

Symbol: save_1_binary
   Definitions
      At line 195 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 189 in file RD_BV_MAIN.s
      At line 192 in file RD_BV_MAIN.s

shift_binary_mask 000000D0

Symbol: shift_binary_mask
   Definitions
      At line 198 in file RD_BV_MAIN.s
   Uses
      At line 193 in file RD_BV_MAIN.s
Comment: shift_binary_mask used once
start_while_binary_msg 000000E4

Symbol: start_while_binary_msg
   Definitions
      At line 214 in file RD_BV_MAIN.s
   Uses
      At line 238 in file RD_BV_MAIN.s
Comment: start_while_binary_msg used once
start_while_is_not_end_wall 0000008C

Symbol: start_while_is_not_end_wall
   Definitions
      At line 156 in file RD_BV_MAIN.s
   Uses
      At line 201 in file RD_BV_MAIN.s
Comment: start_while_is_not_end_wall used once
start_while_is_start_wall 00000008

Symbol: start_while_is_start_wall
   Definitions
      At line 64 in file RD_BV_MAIN.s
   Uses
      At line 69 in file RD_BV_MAIN.s
Comment: start_while_is_start_wall used once
sw1 00000024

Symbol: sw1
   Definitions
      At line 77 in file RD_BV_MAIN.s
   Uses
      At line 79 in file RD_BV_MAIN.s
      At line 83 in file RD_BV_MAIN.s

sw2 0000003C

Symbol: sw2
   Definitions
      At line 95 in file RD_BV_MAIN.s
   Uses
      At line 97 in file RD_BV_MAIN.s
Comment: sw2 used once
wait_to_be_outside_range_X 0000009E

Symbol: wait_to_be_outside_range_X
   Definitions
      At line 170 in file RD_BV_MAIN.s
   Uses
      None



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: wait_to_be_outside_range_X unused
wait_to_be_outside_range_Y_DOWN 00000090

Symbol: wait_to_be_outside_range_Y_DOWN
   Definitions
      At line 162 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_DOWN unused
wait_to_be_outside_range_Y_UP 000000B8

Symbol: wait_to_be_outside_range_Y_UP
   Definitions
      At line 183 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_UP unused
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TEMPS_X 0121EAC0

Symbol: TEMPS_X
   Definitions
      At line 1 in file RD_BV_MAIN.s
   Uses
      At line 109 in file RD_BV_MAIN.s
Comment: TEMPS_X used once
TEMPS_Y 011A49A0

Symbol: TEMPS_Y
   Definitions
      At line 2 in file RD_BV_MAIN.s
   Uses
      At line 110 in file RD_BV_MAIN.s
Comment: TEMPS_Y used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__BLINK_LED_1_2 00000000

Symbol: __BLINK_LED_1_2
   Definitions
      At line 47 in file RD_BV_MAIN.s
   Uses
      None
Comment: __BLINK_LED_1_2 unused
__CONFIG_0LED 00000000

Symbol: __CONFIG_0LED
   Definitions
      At line 50 in file RD_BV_MAIN.s
   Uses
      None
Comment: __CONFIG_0LED unused
__CONFIG_BUMPER 00000000

Symbol: __CONFIG_BUMPER
   Definitions
      At line 35 in file RD_BV_MAIN.s
   Uses
      At line 62 in file RD_BV_MAIN.s
Comment: __CONFIG_BUMPER used once
__CONFIG_LED 00000000

Symbol: __CONFIG_LED
   Definitions
      At line 40 in file RD_BV_MAIN.s
   Uses
      At line 76 in file RD_BV_MAIN.s
Comment: __CONFIG_LED used once
__CONFIG_SW 00000000

Symbol: __CONFIG_SW
   Definitions
      At line 30 in file RD_BV_MAIN.s
   Uses
      At line 75 in file RD_BV_MAIN.s
      At line 93 in file RD_BV_MAIN.s

__DISPLAY_BYTE_DATA 00000000

Symbol: __DISPLAY_BYTE_DATA
   Definitions
      At line 51 in file RD_BV_MAIN.s
   Uses
      None
Comment: __DISPLAY_BYTE_DATA unused
__ENGINE_INIT 00000000

Symbol: __ENGINE_INIT
   Definitions
      At line 10 in file RD_BV_MAIN.s
   Uses
      At line 92 in file RD_BV_MAIN.s
Comment: __ENGINE_INIT used once
__ENGINE_LEFT_BACK 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: __ENGINE_LEFT_BACK
   Definitions
      At line 19 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_BACK unused
__ENGINE_LEFT_BACK_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_BACK_RIGHT_FRONT
   Definitions
      At line 25 in file RD_BV_MAIN.s
   Uses
      At line 130 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_BACK_RIGHT_FRONT used once
__ENGINE_LEFT_FRONT 00000000

Symbol: __ENGINE_LEFT_FRONT
   Definitions
      At line 18 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_FRONT unused
__ENGINE_LEFT_FRONT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_FRONT_RIGHT_BACK
   Definitions
      At line 26 in file RD_BV_MAIN.s
   Uses
      At line 120 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_FRONT_RIGHT_BACK used once
__ENGINE_LEFT_INVERSE 00000000

Symbol: __ENGINE_LEFT_INVERSE
   Definitions
      At line 20 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_INVERSE unused
__ENGINE_LEFT_OFF 00000000

Symbol: __ENGINE_LEFT_OFF
   Definitions
      At line 17 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_OFF unused
__ENGINE_LEFT_ON 00000000

Symbol: __ENGINE_LEFT_ON
   Definitions
      At line 16 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_ON unused
__ENGINE_LEFT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_RIGHT_BACK
   Definitions
      At line 24 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

   Uses
      At line 158 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_BACK used once
__ENGINE_LEFT_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_RIGHT_FRONT
   Definitions
      At line 23 in file RD_BV_MAIN.s
   Uses
      At line 100 in file RD_BV_MAIN.s
      At line 168 in file RD_BV_MAIN.s
      At line 181 in file RD_BV_MAIN.s

__ENGINE_LEFT_RIGHT_INVERSE 00000000

Symbol: __ENGINE_LEFT_RIGHT_INVERSE
   Definitions
      At line 27 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_INVERSE unused
__ENGINE_LEFT_RIGHT_OFF 00000000

Symbol: __ENGINE_LEFT_RIGHT_OFF
   Definitions
      At line 22 in file RD_BV_MAIN.s
   Uses
      At line 74 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_OFF used once
__ENGINE_LEFT_RIGHT_ON 00000000

Symbol: __ENGINE_LEFT_RIGHT_ON
   Definitions
      At line 21 in file RD_BV_MAIN.s
   Uses
      At line 99 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_ON used once
__ENGINE_RIGHT_BACK 00000000

Symbol: __ENGINE_RIGHT_BACK
   Definitions
      At line 14 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_BACK unused
__ENGINE_RIGHT_FRONT 00000000

Symbol: __ENGINE_RIGHT_FRONT
   Definitions
      At line 13 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_FRONT unused
__ENGINE_RIGHT_INVERSE 00000000

Symbol: __ENGINE_RIGHT_INVERSE
   Definitions
      At line 15 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      None
Comment: __ENGINE_RIGHT_INVERSE unused
__ENGINE_RIGHT_OFF 00000000

Symbol: __ENGINE_RIGHT_OFF
   Definitions
      At line 12 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_OFF unused
__ENGINE_RIGHT_ON 00000000

Symbol: __ENGINE_RIGHT_ON
   Definitions
      At line 11 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_ON unused
__READ_STATE_BUMPER_1 00000000

Symbol: __READ_STATE_BUMPER_1
   Definitions
      At line 36 in file RD_BV_MAIN.s
   Uses
      At line 65 in file RD_BV_MAIN.s
      At line 174 in file RD_BV_MAIN.s
      At line 188 in file RD_BV_MAIN.s

__READ_STATE_BUMPER_2 00000000

Symbol: __READ_STATE_BUMPER_2
   Definitions
      At line 37 in file RD_BV_MAIN.s
   Uses
      At line 68 in file RD_BV_MAIN.s
      At line 177 in file RD_BV_MAIN.s
      At line 191 in file RD_BV_MAIN.s

__READ_STATE_SW_1 00000000

Symbol: __READ_STATE_SW_1
   Definitions
      At line 31 in file RD_BV_MAIN.s
   Uses
      At line 78 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_1 used once
__READ_STATE_SW_2 00000000

Symbol: __READ_STATE_SW_2
   Definitions
      At line 32 in file RD_BV_MAIN.s
   Uses
      At line 96 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_2 used once
__SWITCH_OFF_LED_1 00000000

Symbol: __SWITCH_OFF_LED_1
   Definitions
      At line 44 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: __SWITCH_OFF_LED_1 unused
__SWITCH_OFF_LED_1_2 00000000

Symbol: __SWITCH_OFF_LED_1_2
   Definitions
      At line 46 in file RD_BV_MAIN.s
   Uses
      At line 234 in file RD_BV_MAIN.s
Comment: __SWITCH_OFF_LED_1_2 used once
__SWITCH_OFF_LED_2 00000000

Symbol: __SWITCH_OFF_LED_2
   Definitions
      At line 45 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_OFF_LED_2 unused
__SWITCH_ON_LED_1 00000000

Symbol: __SWITCH_ON_LED_1
   Definitions
      At line 41 in file RD_BV_MAIN.s
   Uses
      At line 227 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_1 used once
__SWITCH_ON_LED_1_2 00000000

Symbol: __SWITCH_ON_LED_1_2
   Definitions
      At line 43 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_1_2 unused
__SWITCH_ON_LED_2 00000000

Symbol: __SWITCH_ON_LED_2
   Definitions
      At line 42 in file RD_BV_MAIN.s
   Uses
      At line 231 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_2 used once
__WAIT 00000000

Symbol: __WAIT
   Definitions
      At line 54 in file RD_BV_MAIN.s
   Uses
      At line 233 in file RD_BV_MAIN.s
Comment: __WAIT used once
__WAIT_A_TIME 00000000

Symbol: __WAIT_A_TIME
   Definitions
      At line 56 in file RD_BV_MAIN.s
   Uses
      At line 164 in file RD_BV_MAIN.s
      At line 172 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
External symbols

      At line 185 in file RD_BV_MAIN.s

__WAIT_HALF_ROTATION 00000000

Symbol: __WAIT_HALF_ROTATION
   Definitions
      At line 55 in file RD_BV_MAIN.s
   Uses
      At line 121 in file RD_BV_MAIN.s
      At line 131 in file RD_BV_MAIN.s

37 symbols
406 symbols in table
