


ARM Macro Assembler    Page 1 


    1 00000000 0121EAC0 
                       TEMPS_X EQU              0x121EAC0
    2 00000000 011A49A0 
                       TEMPS_Y EQU              0x11A49A0
    3 00000000         
    4 00000000                 AREA             _MAIN_PROGRAM_, CODE, READONLY
    5 00000000                 ENTRY
    6 00000000                 EXPORT           __main
    7 00000000         
    8 00000000         ;----------------------------------------IMPORT---------
                       ---------------------------------------;
    9 00000000         ;----------------------ENGINE-----------------;
   10 00000000                 IMPORT           __ENGINE_INIT ; init engine (co
                                                            nfigure pwms + GPIO
                                                            )
   11 00000000                 IMPORT           __ENGINE_RIGHT_ON ; activate ri
                                                            ght engine
   12 00000000                 IMPORT           __ENGINE_RIGHT_OFF ; desactivat
                                                            e right engine
   13 00000000                 IMPORT           __ENGINE_RIGHT_FRONT ; right  e
                                                            ngine go forward
   14 00000000                 IMPORT           __ENGINE_RIGHT_BACK ; right eng
                                                            ine go backward
   15 00000000                 IMPORT           __ENGINE_RIGHT_INVERSE ; invers
                                                            e rotation directio
                                                            n of roght engine
   16 00000000                 IMPORT           __ENGINE_LEFT_ON ; activate lef
                                                            t engine
   17 00000000                 IMPORT           __ENGINE_LEFT_OFF ; desactivate
                                                             left engine
   18 00000000                 IMPORT           __ENGINE_LEFT_FRONT ; left  eng
                                                            ine go forward
   19 00000000                 IMPORT           __ENGINE_LEFT_BACK ; left  engi
                                                            ne go backward
   20 00000000                 IMPORT           __ENGINE_LEFT_INVERSE ; inverse
                                                             rotation direction
                                                             of left engine
   21 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_ON ; activa
                                                            te right and left e
                                                            ngine
   22 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_OFF ; desac
                                                            tivate right and le
                                                            ft engine
   23 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_FRONT ; lef
                                                            t and right  engine
                                                             go forward
   24 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_BACK ; left
                                                             and right  engine 
                                                            go backward
   25 00000000                 IMPORT           __ENGINE_LEFT_BACK_RIGHT_FRONT 
                                                            ; left engine go ba
                                                            ckward and right  e
                                                            ngine go frontward
   26 00000000                 IMPORT           __ENGINE_LEFT_FRONT_RIGHT_BACK 
                                                            ; left engine go fr
                                                            ontward and right  
                                                            engine go backward
   27 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_INVERSE ; i
                                                            nverse rotation dir



ARM Macro Assembler    Page 2 


                                                            ection of right & l
                                                            eft engine
   28 00000000         
   29 00000000         ;----------------------SWITCH-----------------;
   30 00000000                 IMPORT           __CONFIG_SW ; configure SW (con
                                                            figure pwms + GPIO)
                                                            
   31 00000000                 IMPORT           __READ_STATE_SW_1 
                                                            ;Read state of SW1
   32 00000000                 IMPORT           __READ_STATE_SW_2 
                                                            ;Read state of SW2
   33 00000000         
   34 00000000         ;----------------------BUMPER-----------------;
   35 00000000                 IMPORT           __CONFIG_BUMPER ; configure Bum
                                                            per (configure pwms
                                                             + GPIO)
   36 00000000                 IMPORT           __READ_STATE_BUMPER_1 ;Read sta
                                                            te of Bumper 1
   37 00000000                 IMPORT           __READ_STATE_BUMPER_2 ;Read sta
                                                            te of Bumper 2
   38 00000000         
   39 00000000         ;----------------------LED-----------------;
   40 00000000                 IMPORT           __CONFIG_LED ; configure Led (c
                                                            onfigure pwms + GPI
                                                            O)
   41 00000000                 IMPORT           __SWITCH_ON_LED_1 
                                                            ;Switch on LED1
   42 00000000                 IMPORT           __SWITCH_ON_LED_2 
                                                            ;Switch off LED2
   43 00000000                 IMPORT           __SWITCH_ON_LED_1_2 ;Switch off
                                                             LED1 1 & 2
   44 00000000                 IMPORT           __SWITCH_OFF_LED_1 
                                                            ;Switch on LED2
   45 00000000                 IMPORT           __SWITCH_OFF_LED_2 
                                                            ;Switch off LED2
   46 00000000                 IMPORT           __SWITCH_OFF_LED_1_2 ;Switch of
                                                            f LED1 1 & 2
   47 00000000                 IMPORT           __BLINK_LED_1_2 
                                                            ;Blink LED 1 & 2
   48 00000000         
   49 00000000         ;----------------------OLED-----------------;
   50 00000000         ;IMPORT __CONFIG_0LED
   51 00000000         ;IMPORT __DISPLAY_BYTE_DATA
   52 00000000         
   53 00000000         ;----------------------TOOLS-----------------;
   54 00000000                 IMPORT           __WAIT
   55 00000000                 IMPORT           __WAIT_HALF_ROTATION
   56 00000000                 IMPORT           __WAIT_A_TIME
   57 00000000         
   58 00000000         ;----------------------------------------START MAIN-----
                       -------------------------------------------;
   59 00000000         
   60 00000000         __main
   61 00000000 F000 F800       BL               __CONFIG_0LED
   62 00000004 F7FF FFFE       BL               __WAIT
   63 00000008 F000 F816       BL               __INIT_START
   64 0000000C F7FF FFFE       BL               __CONFIG_BUMPER
   65 00000010         
   66 00000010         start_while_is_start_wall



ARM Macro Assembler    Page 3 


   67 00000010 F7FF FFFE       BL               __READ_STATE_BUMPER_1
   68 00000014 D002            BEQ              end_while_is_start_wall
   69 00000016         
   70 00000016 F7FF FFFE       BL               __READ_STATE_BUMPER_2
   71 0000001A D1F9            BNE              start_while_is_start_wall
   72 0000001C         
   73 0000001C         end_while_is_start_wall
   74 0000001C F000 F832       BL               __WHILE_IS_NOT_END_WALL
   75 00000020         
   76 00000020 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_OFF
   77 00000024 F7FF FFFE       BL               __CONFIG_SW
   78 00000028 F7FF FFFE       BL               __CONFIG_LED
   79 0000002C         sw1
   80 0000002C F7FF FFFE       BL               __READ_STATE_SW_1
   81 00000030 D1FC            BNE              sw1
   82 00000032         
   83 00000032 F000 F858       BL               __DISPLAY_BINARY_MSG
   84 00000036         
   85 00000036 E7F9            B                sw1
   86 00000038         
   87 00000038         ;----------------------------------------END MAIN-------
                       -----------------------------------------;
   88 00000038         
   89 00000038         ;----------------------------------------START INIT STAR
                       T------------------------------------------------;
   90 00000038         
   91 00000038         __INIT_START
   92 00000038 E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
   93 0000003C         
   94 0000003C F7FF FFFE       BL               __ENGINE_INIT
   95 00000040 F7FF FFFE       BL               __CONFIG_SW
   96 00000044         
   97 00000044         sw2
   98 00000044 F7FF FFFE       BL               __READ_STATE_SW_2
   99 00000048 D1FC            BNE              sw2
  100 0000004A         
  101 0000004A F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_ON
  102 0000004E F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  103 00000052         
  104 00000052 E8BD 9C41       POP              { R0, R6, R10-R12, PC }
  105 00000056         
  106 00000056         ;----------------------------------------END INIT START-
                       -----------------------------------------------;
  107 00000056         
  108 00000056         ;----------------------------------------START INIT AFTE
                       R SW2------------------------------------------------;
  109 00000056         
  110 00000056         __INIT_AFTER_SW2
  111 00000056 4A31            LDR              R2, =TEMPS_X
  112 00000058 4B31            LDR              R3, =TEMPS_Y
  113 0000005A F04F 0700       LDR              R7, =2_00000000
  114 0000005E 4770            BX               LR
  115 00000060         
  116 00000060         ;----------------------------------------END INIT AFTER 
                       SW2------------------------------------------------;
  117 00000060         
  118 00000060         ;----------------------------------------START TURN 90 R
                       IGHT------------------------------------------------;
  119 00000060         



ARM Macro Assembler    Page 4 


  120 00000060         __TURN_90_RIGHT
  121 00000060 B543            PUSH             { R0, R1, R6, LR }
  122 00000062 F7FF FFFE       BL               __ENGINE_LEFT_FRONT_RIGHT_BACK
  123 00000066 F7FF FFFE       BL               __WAIT_HALF_ROTATION
  124 0000006A BD43            POP              { R0, R1, R6, PC }
  125 0000006C         
  126 0000006C         ;----------------------------------------END TURN 90 RIG
                       HT------------------------------------------------;
  127 0000006C         
  128 0000006C         ;----------------------------------------START TURN 90 L
                       EFT------------------------------------------------;
  129 0000006C         
  130 0000006C         __TURN_90_LEFT
  131 0000006C B543            PUSH             { R0, R1, R6, LR }
  132 0000006E F7FF FFFE       BL               __ENGINE_LEFT_BACK_RIGHT_FRONT
  133 00000072 F7FF FFFE       BL               __WAIT_HALF_ROTATION
  134 00000076 BD43            POP              { R0, R1, R6, PC }
  135 00000078         
  136 00000078         ;----------------------------------------END TURN 90 LEF
                       T------------------------------------------------;
  137 00000078         
  138 00000078         
  139 00000078         ;----------------------------------------START TURN_ARRO
                       UND------------------------------------------------;
  140 00000078         
  141 00000078         __TURN_ARROUND
  142 00000078 B543            PUSH             { R0, R1, R6, LR }
  143 0000007A F7FF FFF1       BL               __TURN_90_RIGHT
  144 0000007E F7FF FFEF       BL               __TURN_90_RIGHT
  145 00000082 BD43            POP              { R0, R1, R6, PC }
  146 00000084         
  147 00000084         ;----------------------------------------END TURN_ARROUN
                       D------------------------------------------------;
  148 00000084         
  149 00000084         ;----------------------------------------START WHILE IS 
                       NOT END WALL--------------------------------------------
                       ----;
  150 00000084         
  151 00000084         __WHILE_IS_NOT_END_WALL
  152 00000084 E92D 47FF       PUSH             { R0-R10, LR }
  153 00000088         init_startup_while_var
  154 00000088 F7FF FFE5       BL               __INIT_AFTER_SW2
  155 0000008C F04F 0400       LDR              R4, =0
  156 00000090 F04F 0501       LDR              R5, =2_00000001
  157 00000094         
  158 00000094         start_while_is_not_end_wall
  159 00000094         
  160 00000094 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_BACK
  161 00000098         ;BL __TURN_ARROUND
  162 00000098         ;BL __ENGINE_LEFT_RIGHT_FRONT
  163 00000098         
  164 00000098         wait_to_be_outside_range_Y_DOWN
  165 00000098 4619            MOV              R1, R3
  166 0000009A F7FF FFFE       BL               __WAIT_A_TIME
  167 0000009E         
  168 0000009E         move_to_the_right
  169 0000009E F7FF FFDF       BL               __TURN_90_RIGHT
  170 000000A2 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  171 000000A6         



ARM Macro Assembler    Page 5 


  172 000000A6         wait_to_be_outside_range_X
  173 000000A6 4611            MOV              R1, R2
  174 000000A8 F7FF FFFE       BL               __WAIT_A_TIME
  175 000000AC         end_wall_is_bumped
  176 000000AC F7FF FFFE       BL               __READ_STATE_BUMPER_1
  177 000000B0 D017            BEQ              end_while_is_not_end_wall
  178 000000B2         
  179 000000B2 F7FF FFFE       BL               __READ_STATE_BUMPER_2
  180 000000B6 D014            BEQ              end_while_is_not_end_wall
  181 000000B8         move_to_the_up
  182 000000B8 F7FF FFD8       BL               __TURN_90_LEFT
  183 000000BC F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  184 000000C0         
  185 000000C0         wait_to_be_outside_range_Y_UP
  186 000000C0 4619            MOV              R1, R3
  187 000000C2 F7FF FFFE       BL               __WAIT_A_TIME
  188 000000C6         
  189 000000C6         basic_wall_is_bumped
  190 000000C6 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  191 000000CA D003            BEQ              save_1_binary
  192 000000CC         
  193 000000CC F7FF FFFE       BL               __READ_STATE_BUMPER_2
  194 000000D0 D000            BEQ              save_1_binary
  195 000000D2 E001            B                shift_binary_mask
  196 000000D4         
  197 000000D4         save_1_binary
  198 000000D4 EA45 0707       ORR              R7, R5, R7
  199 000000D8         
  200 000000D8         shift_binary_mask
  201 000000D8 FA05 F504       LSL              R5, R5, R4
  202 000000DC F104 0401       ADD              R4, #1
  203 000000E0 E7D8            B                start_while_is_not_end_wall
  204 000000E2         
  205 000000E2         end_while_is_not_end_wall
  206 000000E2 E8BD 87FF       POP              { R0-R10, PC }
  207 000000E6         
  208 000000E6         ;----------------------------------------END WHILE IS NO
                       T END WALL----------------------------------------------
                       --;
  209 000000E6         
  210 000000E6         ;----------------------------------------START DISPLAY_B
                       INARY_MSG-----------------------------------------------
                       -;
  211 000000E6         
  212 000000E6         __DISPLAY_BINARY_MSG
  213 000000E6 B5DF            PUSH             { R0-R4, R6, R7, LR }
  214 000000E8         
  215 000000E8 F04F 0300       LDR              R3, =0
  216 000000EC         start_while_binary_msg
  217 000000EC 2B07            CMP              R3, #7
  218 000000EE D013            BEQ              end_while_binary_msg
  219 000000F0         
  220 000000F0 F007 0201       AND              R2, R7, #2_00000001
  221 000000F4         
  222 000000F4 2A01            CMP              R2, #1
  223 000000F6 D001            BEQ              display_1
  224 000000F8         
  225 000000F8 2A00            CMP              R2, #0
  226 000000FA D002            BEQ              display_0



ARM Macro Assembler    Page 6 


  227 000000FC         
  228 000000FC         display_1
  229 000000FC F7FF FFFE       BL               __SWITCH_ON_LED_1
  230 00000100 E001            B                end_display
  231 00000102         
  232 00000102         display_0
  233 00000102 F7FF FFFE       BL               __SWITCH_ON_LED_2
  234 00000106         end_display
  235 00000106 F7FF FFFE       BL               __WAIT
  236 0000010A F7FF FFFE       BL               __SWITCH_OFF_LED_1_2
  237 0000010E         
  238 0000010E F103 0301       ADD              R3, #1
  239 00000112 FA27 F703       LSR              R7, R3
  240 00000116 E7E9            B                start_while_binary_msg
  241 00000118         end_while_binary_msg
  242 00000118         
  243 00000118 BDDF            POP              { R0-R4, R6, R7, PC }
  244 0000011A         
  245 0000011A         ;----------------------------------------END DISPLAY_BIN
                       ARY_MSG------------------------------------------------;
                       
  246 0000011A         
  247 0000011A         end_p
  248 0000011A                 END
              00 00 0121EAC0 
              011A49A0 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rd_bv_main.d -o.\objects\rd_bv_main.o -I.\RTE\_Target_1 
-ID:\ProgramFiles\Armv52\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\ProgramFiles\A
rmv52\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="A
RMCM3 SETA 1" --list=.\listings\rd_bv_main.lst RD_BV_MAIN.s
