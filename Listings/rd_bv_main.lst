


ARM Macro Assembler    Page 1 


    1 00000000 011A49A0 
                       TEMPS_X EQU              0x11A49A0
    2 00000000 011A49A0 
                       TEMPS_Y EQU              0x11A49A0
    3 00000000         
    4 00000000                 AREA             _MAIN_PROGRAM_, CODE, READONLY
    5 00000000                 ENTRY
    6 00000000                 EXPORT           __main
    7 00000000         
    8 00000000         ;----------------------------------------IMPORT---------
                       ---------------------------------------;
    9 00000000         ;----------------------ENGINE-----------------;
   10 00000000                 IMPORT           __ENGINE_INIT ; init engine (co
                                                            nfigure pwms + GPIO
                                                            )
   11 00000000                 IMPORT           __ENGINE_RIGHT_ON ; activate ri
                                                            ght engine
   12 00000000                 IMPORT           __ENGINE_RIGHT_OFF ; desactivat
                                                            e right engine
   13 00000000                 IMPORT           __ENGINE_RIGHT_FRONT ; right  e
                                                            ngine go forward
   14 00000000                 IMPORT           __ENGINE_RIGHT_BACK ; right eng
                                                            ine go backward
   15 00000000                 IMPORT           __ENGINE_RIGHT_INVERSE ; invers
                                                            e rotation directio
                                                            n of roght engine
   16 00000000                 IMPORT           __ENGINE_LEFT_ON ; activate lef
                                                            t engine
   17 00000000                 IMPORT           __ENGINE_LEFT_OFF ; desactivate
                                                             left engine
   18 00000000                 IMPORT           __ENGINE_LEFT_FRONT ; left  eng
                                                            ine go forward
   19 00000000                 IMPORT           __ENGINE_LEFT_BACK ; left  engi
                                                            ne go backward
   20 00000000                 IMPORT           __ENGINE_LEFT_INVERSE ; inverse
                                                             rotation direction
                                                             of left engine
   21 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_ON ; activa
                                                            te right and left e
                                                            ngine
   22 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_OFF ; desac
                                                            tivate right and le
                                                            ft engine
   23 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_FRONT ; lef
                                                            t and right  engine
                                                             go forward
   24 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_BACK ; left
                                                             and right  engine 
                                                            go backward
   25 00000000                 IMPORT           __ENGINE_LEFT_BACK_RIGHT_FRONT 
                                                            ; left engine go ba
                                                            ckward and right  e
                                                            ngine go frontward
   26 00000000                 IMPORT           __ENGINE_LEFT_FRONT_RIGHT_BACK 
                                                            ; left engine go fr
                                                            ontward and right  
                                                            engine go backward
   27 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_INVERSE ; i
                                                            nverse rotation dir



ARM Macro Assembler    Page 2 


                                                            ection of right & l
                                                            eft engine
   28 00000000         
   29 00000000         ;----------------------SWITCH-----------------;
   30 00000000                 IMPORT           __CONFIG_SW ; configure SW (con
                                                            figure pwms + GPIO)
                                                            
   31 00000000                 IMPORT           __READ_STATE_SW_1 
                                                            ;Read state of SW1
   32 00000000                 IMPORT           __READ_STATE_SW_2 
                                                            ;Read state of SW2
   33 00000000         
   34 00000000         ;----------------------BUMPER-----------------;
   35 00000000                 IMPORT           __CONFIG_BUMPER ; configure Bum
                                                            per (configure pwms
                                                             + GPIO)
   36 00000000                 IMPORT           __READ_STATE_BUMPER_1 ;Read sta
                                                            te of Bumper 1
   37 00000000                 IMPORT           __READ_STATE_BUMPER_2 ;Read sta
                                                            te of Bumper 2
   38 00000000         
   39 00000000         ;----------------------LED-----------------;
   40 00000000                 IMPORT           __CONFIG_LED ; configure Led (c
                                                            onfigure pwms + GPI
                                                            O)
   41 00000000                 IMPORT           __SWITCH_ON_LED_1 
                                                            ;Switch on LED1
   42 00000000                 IMPORT           __SWITCH_ON_LED_2 
                                                            ;Switch off LED2
   43 00000000                 IMPORT           __SWITCH_ON_LED_1_2 ;Switch off
                                                             LED1 1 & 2
   44 00000000                 IMPORT           __SWITCH_OFF_LED_1 
                                                            ;Switch on LED2
   45 00000000                 IMPORT           __SWITCH_OFF_LED_2 
                                                            ;Switch off LED2
   46 00000000                 IMPORT           __SWITCH_OFF_LED_1_2 ;Switch of
                                                            f LED1 1 & 2
   47 00000000                 IMPORT           __BLINK_LED_1_2 
                                                            ;Blink LED 1 & 2
   48 00000000         
   49 00000000         ;----------------------TOOLS-----------------;
   50 00000000                 IMPORT           __CONFIG_0LED
   51 00000000                 IMPORT           __DISPLAY_BYTE_DATA
   52 00000000         
   53 00000000         ;----------------------TOOLS-----------------;
   54 00000000                 IMPORT           __WAIT_HALF_ROTATION
   55 00000000                 IMPORT           __WAIT_A_TIME
   56 00000000         
   57 00000000         ;----------------------------------------START MAIN-----
                       -------------------------------------------;
   58 00000000         
   59 00000000         __main
   60 00000000 F7FF FFFE       BL               __CONFIG_0LED
   61 00000004 F04F 0201       LDR              R2, =2_00000001
   62 00000008 F7FF FFFE       BL               __DISPLAY_BYTE_DATA
   63 0000000C         
   64 0000000C         ;         BL __INIT_START
   65 0000000C         ;         BL __CONFIG_BUMPER
   66 0000000C         



ARM Macro Assembler    Page 3 


   67 0000000C         start_while_is_start_wall
   68 0000000C         ;         BL __READ_STATE_BUMPER_1
   69 0000000C         ;         BEQ end_while_is_start_wall
   70 0000000C         
   71 0000000C         ;         BL __READ_STATE_BUMPER_2
   72 0000000C         ;         BNE start_while_is_start_wall
   73 0000000C         
   74 0000000C         end_while_is_start_wall
   75 0000000C         ;         BL __WHILE_IS_NOT_END_WALL
   76 0000000C         
   77 0000000C         ;         BL __ENGINE_LEFT_RIGHT_OFF
   78 0000000C         
   79 0000000C         sw1
   80 0000000C         ;         BL __READ_STATE_SW_1
   81 0000000C         ;         BNE sw1
   82 0000000C         ;
   83 0000000C         
   84 0000000C         
   85 0000000C E072            B                end_p
   86 0000000E         
   87 0000000E         ;----------------------------------------END MAIN-------
                       -----------------------------------------;
   88 0000000E         
   89 0000000E         ;----------------------------------------START INIT STAR
                       T------------------------------------------------;
   90 0000000E         
   91 0000000E         __INIT_START
   92 0000000E E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
   93 00000012         
   94 00000012 F7FF FFFE       BL               __ENGINE_INIT
   95 00000016 F7FF FFFE       BL               __CONFIG_SW
   96 0000001A         
   97 0000001A         sw2
   98 0000001A F7FF FFFE       BL               __READ_STATE_SW_2
   99 0000001E D1FC            BNE              sw2
  100 00000020         
  101 00000020 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_ON
  102 00000024 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  103 00000028         
  104 00000028 E8BD 9C41       POP              { R0, R6, R10-R12, PC }
  105 0000002C         
  106 0000002C         ;----------------------------------------END INIT START-
                       -----------------------------------------------;
  107 0000002C         
  108 0000002C         ;----------------------------------------START INIT AFTE
                       R SW2------------------------------------------------;
  109 0000002C         
  110 0000002C         __INIT_AFTER_SW2
  111 0000002C 4A31            LDR              R2, =TEMPS_X
  112 0000002E 4B31            LDR              R3, =TEMPS_Y
  113 00000030 F04F 0700       LDR              R7, =2_00000000
  114 00000034 4770            BX               LR
  115 00000036         
  116 00000036         ;----------------------------------------END INIT AFTER 
                       SW2------------------------------------------------;
  117 00000036         
  118 00000036         ;----------------------------------------START TURN 90 R
                       IGHT------------------------------------------------;
  119 00000036         



ARM Macro Assembler    Page 4 


  120 00000036         __TURN_90_RIGHT
  121 00000036 B543            PUSH             { R0, R1, R6, LR }
  122 00000038 F7FF FFFE       BL               __ENGINE_LEFT_FRONT_RIGHT_BACK
  123 0000003C F7FF FFFE       BL               __WAIT_HALF_ROTATION
  124 00000040 BD43            POP              { R0, R1, R6, PC }
  125 00000042         
  126 00000042         ;----------------------------------------END TURN 90 RIG
                       HT------------------------------------------------;
  127 00000042         
  128 00000042         ;----------------------------------------START TURN 90 L
                       EFT------------------------------------------------;
  129 00000042         
  130 00000042         __TURN_90_LEFT
  131 00000042 B543            PUSH             { R0, R1, R6, LR }
  132 00000044 F7FF FFFE       BL               __ENGINE_LEFT_BACK_RIGHT_FRONT
  133 00000048 F7FF FFFE       BL               __WAIT_HALF_ROTATION
  134 0000004C BD43            POP              { R0, R1, R6, PC }
  135 0000004E         
  136 0000004E         ;----------------------------------------END TURN 90 LEF
                       T------------------------------------------------;
  137 0000004E         
  138 0000004E         
  139 0000004E         ;----------------------------------------START TURN_ARRO
                       UND------------------------------------------------;
  140 0000004E         
  141 0000004E         __TURN_ARROUND
  142 0000004E B543            PUSH             { R0, R1, R6, LR }
  143 00000050 F7FF FFF1       BL               __TURN_90_RIGHT
  144 00000054 F7FF FFEF       BL               __TURN_90_RIGHT
  145 00000058 BD43            POP              { R0, R1, R6, PC }
  146 0000005A         
  147 0000005A         ;----------------------------------------END TURN_ARROUN
                       D------------------------------------------------;
  148 0000005A         
  149 0000005A         ;----------------------------------------START WHILE IS 
                       NOT END WALL--------------------------------------------
                       ----;
  150 0000005A         
  151 0000005A         __WHILE_IS_NOT_END_WALL
  152 0000005A E92D 47FF       PUSH             { R0-R10, LR }
  153 0000005E         init_startup_while_var
  154 0000005E F7FF FFE5       BL               __INIT_AFTER_SW2
  155 00000062 F04F 0400       LDR              R4, =0
  156 00000066 F04F 0501       LDR              R5, =2_00000001
  157 0000006A         
  158 0000006A         start_while_is_not_end_wall
  159 0000006A         
  160 0000006A         move_to_the_left
  161 0000006A F7FF FFF0       BL               __TURN_ARROUND
  162 0000006E F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  163 00000072         
  164 00000072         wait_to_be_outside_range_Y_DOWN
  165 00000072 4619            MOV              R1, R3
  166 00000074 F7FF FFFE       BL               __WAIT_A_TIME
  167 00000078         
  168 00000078 F7FF FFE3       BL               __TURN_90_LEFT
  169 0000007C F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  170 00000080         
  171 00000080         wait_to_be_outside_range_X



ARM Macro Assembler    Page 5 


  172 00000080 4611            MOV              R1, R2
  173 00000082 F7FF FFFE       BL               __WAIT_A_TIME
  174 00000086         end_wall_is_bumped
  175 00000086 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  176 0000008A D017            BEQ              end_while_is_not_end_wall
  177 0000008C         
  178 0000008C F7FF FFFE       BL               __READ_STATE_BUMPER_2
  179 00000090 D014            BEQ              end_while_is_not_end_wall
  180 00000092         move_to_the_up
  181 00000092 F7FF FFD6       BL               __TURN_90_LEFT
  182 00000096 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  183 0000009A         
  184 0000009A         wait_to_be_outside_range_Y_UP
  185 0000009A 4619            MOV              R1, R3
  186 0000009C F7FF FFFE       BL               __WAIT_A_TIME
  187 000000A0         
  188 000000A0         basic_wall_is_bumped
  189 000000A0 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  190 000000A4 D003            BEQ              save_1_binary
  191 000000A6         
  192 000000A6 F7FF FFFE       BL               __READ_STATE_BUMPER_2
  193 000000AA D000            BEQ              save_1_binary
  194 000000AC E001            B                shift_binary_mask
  195 000000AE         
  196 000000AE         save_1_binary
  197 000000AE EA45 0707       ORR              R7, R5, R7
  198 000000B2         
  199 000000B2         shift_binary_mask
  200 000000B2 FA05 F504       LSL              R5, R5, R4
  201 000000B6 F104 0401       ADD              R4, #1
  202 000000BA E7D6            B                start_while_is_not_end_wall
  203 000000BC         
  204 000000BC         end_while_is_not_end_wall
  205 000000BC E8BD 85FF       POP              { R0-R8, R10, PC }
  206 000000C0         
  207 000000C0         ;----------------------------------------END WHILE IS NO
                       T END WALL----------------------------------------------
                       --;
  208 000000C0         
  209 000000C0         ;----------------------------------------START DISPLAY_B
                       INARY_MSG-----------------------------------------------
                       -;
  210 000000C0         
  211 000000C0         __DISPLAY_BINARY_MSG
  212 000000C0 B5DF            PUSH             { R0-R4, R6, R7, LR }
  213 000000C2         
  214 000000C2 F04F 0300       LDR              R3, =0
  215 000000C6         start_while_binary_msg
  216 000000C6 2B07            CMP              R3, #7
  217 000000C8 D00F            BEQ              end_while_binary_msg
  218 000000CA         
  219 000000CA F007 0201       AND              R2, R7, #2_00000001
  220 000000CE         
  221 000000CE 2A01            CMP              R2, #1
  222 000000D0 BF08 F7FF 
              FFFE             BLEQ             __SWITCH_ON_LED_1
  223 000000D6         
  224 000000D6 2A00            CMP              R2, #0
  225 000000D8 BF08 F7FF 



ARM Macro Assembler    Page 6 


              FFFE             BLEQ             __SWITCH_ON_LED_2
  226 000000DE         
  227 000000DE F7FF FFFE       BL               __SWITCH_OFF_LED_1_2
  228 000000E2         
  229 000000E2 F103 0301       ADD              R3, #1
  230 000000E6 FA27 F703       LSR              R7, R3
  231 000000EA         
  232 000000EA         end_while_binary_msg
  233 000000EA         
  234 000000EA F7FF FFFE       BL               __CONFIG_0LED
  235 000000EE F7FF FFFE       BL               __DISPLAY_BYTE_DATA
  236 000000F2         
  237 000000F2 BDDF            POP              { R0-R4, R6, R7, PC }
  238 000000F4         
  239 000000F4         ;----------------------------------------END DISPLAY_BIN
                       ARY_MSG------------------------------------------------;
                       
  240 000000F4         
  241 000000F4         end_p
  242 000000F4                 END
              011A49A0 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rd_bv_main.d -o.\objects\rd_bv_main.o -I.\RTE\_Target_1 
-ID:\ProgramFiles\Armv52\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\ProgramFiles\A
rmv52\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="A
RMCM3 SETA 1" --list=.\listings\rd_bv_main.lst RD_BV_MAIN.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

_MAIN_PROGRAM_ 00000000

Symbol: _MAIN_PROGRAM_
   Definitions
      At line 4 in file RD_BV_MAIN.s
   Uses
      None
Comment: _MAIN_PROGRAM_ unused
__DISPLAY_BINARY_MSG 000000C0

Symbol: __DISPLAY_BINARY_MSG
   Definitions
      At line 211 in file RD_BV_MAIN.s
   Uses
      None
Comment: __DISPLAY_BINARY_MSG unused
__INIT_AFTER_SW2 0000002C

Symbol: __INIT_AFTER_SW2
   Definitions
      At line 110 in file RD_BV_MAIN.s
   Uses
      At line 154 in file RD_BV_MAIN.s
Comment: __INIT_AFTER_SW2 used once
__INIT_START 0000000E

Symbol: __INIT_START
   Definitions
      At line 91 in file RD_BV_MAIN.s
   Uses
      None
Comment: __INIT_START unused
__TURN_90_LEFT 00000042

Symbol: __TURN_90_LEFT
   Definitions
      At line 130 in file RD_BV_MAIN.s
   Uses
      At line 168 in file RD_BV_MAIN.s
      At line 181 in file RD_BV_MAIN.s

__TURN_90_RIGHT 00000036

Symbol: __TURN_90_RIGHT
   Definitions
      At line 120 in file RD_BV_MAIN.s
   Uses
      At line 143 in file RD_BV_MAIN.s
      At line 144 in file RD_BV_MAIN.s

__TURN_ARROUND 0000004E

Symbol: __TURN_ARROUND
   Definitions
      At line 141 in file RD_BV_MAIN.s
   Uses
      At line 161 in file RD_BV_MAIN.s
Comment: __TURN_ARROUND used once
__WHILE_IS_NOT_END_WALL 0000005A



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: __WHILE_IS_NOT_END_WALL
   Definitions
      At line 151 in file RD_BV_MAIN.s
   Uses
      None
Comment: __WHILE_IS_NOT_END_WALL unused
__main 00000000

Symbol: __main
   Definitions
      At line 59 in file RD_BV_MAIN.s
   Uses
      At line 6 in file RD_BV_MAIN.s
Comment: __main used once
basic_wall_is_bumped 000000A0

Symbol: basic_wall_is_bumped
   Definitions
      At line 188 in file RD_BV_MAIN.s
   Uses
      None
Comment: basic_wall_is_bumped unused
end_p 000000F4

Symbol: end_p
   Definitions
      At line 241 in file RD_BV_MAIN.s
   Uses
      At line 85 in file RD_BV_MAIN.s
Comment: end_p used once
end_wall_is_bumped 00000086

Symbol: end_wall_is_bumped
   Definitions
      At line 174 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_wall_is_bumped unused
end_while_binary_msg 000000EA

Symbol: end_while_binary_msg
   Definitions
      At line 232 in file RD_BV_MAIN.s
   Uses
      At line 217 in file RD_BV_MAIN.s
Comment: end_while_binary_msg used once
end_while_is_not_end_wall 000000BC

Symbol: end_while_is_not_end_wall
   Definitions
      At line 204 in file RD_BV_MAIN.s
   Uses
      At line 176 in file RD_BV_MAIN.s
      At line 179 in file RD_BV_MAIN.s

end_while_is_start_wall 0000000C

Symbol: end_while_is_start_wall



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 74 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_while_is_start_wall unused
init_startup_while_var 0000005E

Symbol: init_startup_while_var
   Definitions
      At line 153 in file RD_BV_MAIN.s
   Uses
      None
Comment: init_startup_while_var unused
move_to_the_left 0000006A

Symbol: move_to_the_left
   Definitions
      At line 160 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_left unused
move_to_the_up 00000092

Symbol: move_to_the_up
   Definitions
      At line 180 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_up unused
save_1_binary 000000AE

Symbol: save_1_binary
   Definitions
      At line 196 in file RD_BV_MAIN.s
   Uses
      At line 190 in file RD_BV_MAIN.s
      At line 193 in file RD_BV_MAIN.s

shift_binary_mask 000000B2

Symbol: shift_binary_mask
   Definitions
      At line 199 in file RD_BV_MAIN.s
   Uses
      At line 194 in file RD_BV_MAIN.s
Comment: shift_binary_mask used once
start_while_binary_msg 000000C6

Symbol: start_while_binary_msg
   Definitions
      At line 215 in file RD_BV_MAIN.s
   Uses
      None
Comment: start_while_binary_msg unused
start_while_is_not_end_wall 0000006A

Symbol: start_while_is_not_end_wall
   Definitions
      At line 158 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 202 in file RD_BV_MAIN.s
Comment: start_while_is_not_end_wall used once
start_while_is_start_wall 0000000C

Symbol: start_while_is_start_wall
   Definitions
      At line 67 in file RD_BV_MAIN.s
   Uses
      None
Comment: start_while_is_start_wall unused
sw1 0000000C

Symbol: sw1
   Definitions
      At line 79 in file RD_BV_MAIN.s
   Uses
      None
Comment: sw1 unused
sw2 0000001A

Symbol: sw2
   Definitions
      At line 97 in file RD_BV_MAIN.s
   Uses
      At line 99 in file RD_BV_MAIN.s
Comment: sw2 used once
wait_to_be_outside_range_X 00000080

Symbol: wait_to_be_outside_range_X
   Definitions
      At line 171 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_X unused
wait_to_be_outside_range_Y_DOWN 00000072

Symbol: wait_to_be_outside_range_Y_DOWN
   Definitions
      At line 164 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_DOWN unused
wait_to_be_outside_range_Y_UP 0000009A

Symbol: wait_to_be_outside_range_Y_UP
   Definitions
      At line 184 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_UP unused
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TEMPS_X 011A49A0

Symbol: TEMPS_X
   Definitions
      At line 1 in file RD_BV_MAIN.s
   Uses
      At line 111 in file RD_BV_MAIN.s
Comment: TEMPS_X used once
TEMPS_Y 011A49A0

Symbol: TEMPS_Y
   Definitions
      At line 2 in file RD_BV_MAIN.s
   Uses
      At line 112 in file RD_BV_MAIN.s
Comment: TEMPS_Y used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__BLINK_LED_1_2 00000000

Symbol: __BLINK_LED_1_2
   Definitions
      At line 47 in file RD_BV_MAIN.s
   Uses
      None
Comment: __BLINK_LED_1_2 unused
__CONFIG_0LED 00000000

Symbol: __CONFIG_0LED
   Definitions
      At line 50 in file RD_BV_MAIN.s
   Uses
      At line 60 in file RD_BV_MAIN.s
      At line 234 in file RD_BV_MAIN.s

__CONFIG_BUMPER 00000000

Symbol: __CONFIG_BUMPER
   Definitions
      At line 35 in file RD_BV_MAIN.s
   Uses
      None
Comment: __CONFIG_BUMPER unused
__CONFIG_LED 00000000

Symbol: __CONFIG_LED
   Definitions
      At line 40 in file RD_BV_MAIN.s
   Uses
      None
Comment: __CONFIG_LED unused
__CONFIG_SW 00000000

Symbol: __CONFIG_SW
   Definitions
      At line 30 in file RD_BV_MAIN.s
   Uses
      At line 95 in file RD_BV_MAIN.s
Comment: __CONFIG_SW used once
__DISPLAY_BYTE_DATA 00000000

Symbol: __DISPLAY_BYTE_DATA
   Definitions
      At line 51 in file RD_BV_MAIN.s
   Uses
      At line 62 in file RD_BV_MAIN.s
      At line 235 in file RD_BV_MAIN.s

__ENGINE_INIT 00000000

Symbol: __ENGINE_INIT
   Definitions
      At line 10 in file RD_BV_MAIN.s
   Uses
      At line 94 in file RD_BV_MAIN.s
Comment: __ENGINE_INIT used once
__ENGINE_LEFT_BACK 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: __ENGINE_LEFT_BACK
   Definitions
      At line 19 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_BACK unused
__ENGINE_LEFT_BACK_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_BACK_RIGHT_FRONT
   Definitions
      At line 25 in file RD_BV_MAIN.s
   Uses
      At line 132 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_BACK_RIGHT_FRONT used once
__ENGINE_LEFT_FRONT 00000000

Symbol: __ENGINE_LEFT_FRONT
   Definitions
      At line 18 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_FRONT unused
__ENGINE_LEFT_FRONT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_FRONT_RIGHT_BACK
   Definitions
      At line 26 in file RD_BV_MAIN.s
   Uses
      At line 122 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_FRONT_RIGHT_BACK used once
__ENGINE_LEFT_INVERSE 00000000

Symbol: __ENGINE_LEFT_INVERSE
   Definitions
      At line 20 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_INVERSE unused
__ENGINE_LEFT_OFF 00000000

Symbol: __ENGINE_LEFT_OFF
   Definitions
      At line 17 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_OFF unused
__ENGINE_LEFT_ON 00000000

Symbol: __ENGINE_LEFT_ON
   Definitions
      At line 16 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_ON unused
__ENGINE_LEFT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_RIGHT_BACK
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

      At line 24 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_BACK unused
__ENGINE_LEFT_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_RIGHT_FRONT
   Definitions
      At line 23 in file RD_BV_MAIN.s
   Uses
      At line 102 in file RD_BV_MAIN.s
      At line 162 in file RD_BV_MAIN.s
      At line 169 in file RD_BV_MAIN.s
      At line 182 in file RD_BV_MAIN.s

__ENGINE_LEFT_RIGHT_INVERSE 00000000

Symbol: __ENGINE_LEFT_RIGHT_INVERSE
   Definitions
      At line 27 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_INVERSE unused
__ENGINE_LEFT_RIGHT_OFF 00000000

Symbol: __ENGINE_LEFT_RIGHT_OFF
   Definitions
      At line 22 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_OFF unused
__ENGINE_LEFT_RIGHT_ON 00000000

Symbol: __ENGINE_LEFT_RIGHT_ON
   Definitions
      At line 21 in file RD_BV_MAIN.s
   Uses
      At line 101 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_ON used once
__ENGINE_RIGHT_BACK 00000000

Symbol: __ENGINE_RIGHT_BACK
   Definitions
      At line 14 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_BACK unused
__ENGINE_RIGHT_FRONT 00000000

Symbol: __ENGINE_RIGHT_FRONT
   Definitions
      At line 13 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_FRONT unused
__ENGINE_RIGHT_INVERSE 00000000

Symbol: __ENGINE_RIGHT_INVERSE
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      At line 15 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_INVERSE unused
__ENGINE_RIGHT_OFF 00000000

Symbol: __ENGINE_RIGHT_OFF
   Definitions
      At line 12 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_OFF unused
__ENGINE_RIGHT_ON 00000000

Symbol: __ENGINE_RIGHT_ON
   Definitions
      At line 11 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_ON unused
__READ_STATE_BUMPER_1 00000000

Symbol: __READ_STATE_BUMPER_1
   Definitions
      At line 36 in file RD_BV_MAIN.s
   Uses
      At line 175 in file RD_BV_MAIN.s
      At line 189 in file RD_BV_MAIN.s

__READ_STATE_BUMPER_2 00000000

Symbol: __READ_STATE_BUMPER_2
   Definitions
      At line 37 in file RD_BV_MAIN.s
   Uses
      At line 178 in file RD_BV_MAIN.s
      At line 192 in file RD_BV_MAIN.s

__READ_STATE_SW_1 00000000

Symbol: __READ_STATE_SW_1
   Definitions
      At line 31 in file RD_BV_MAIN.s
   Uses
      None
Comment: __READ_STATE_SW_1 unused
__READ_STATE_SW_2 00000000

Symbol: __READ_STATE_SW_2
   Definitions
      At line 32 in file RD_BV_MAIN.s
   Uses
      At line 98 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_2 used once
__SWITCH_OFF_LED_1 00000000

Symbol: __SWITCH_OFF_LED_1
   Definitions
      At line 44 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: __SWITCH_OFF_LED_1 unused
__SWITCH_OFF_LED_1_2 00000000

Symbol: __SWITCH_OFF_LED_1_2
   Definitions
      At line 46 in file RD_BV_MAIN.s
   Uses
      At line 227 in file RD_BV_MAIN.s
Comment: __SWITCH_OFF_LED_1_2 used once
__SWITCH_OFF_LED_2 00000000

Symbol: __SWITCH_OFF_LED_2
   Definitions
      At line 45 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_OFF_LED_2 unused
__SWITCH_ON_LED_1 00000000

Symbol: __SWITCH_ON_LED_1
   Definitions
      At line 41 in file RD_BV_MAIN.s
   Uses
      At line 222 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_1 used once
__SWITCH_ON_LED_1_2 00000000

Symbol: __SWITCH_ON_LED_1_2
   Definitions
      At line 43 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_1_2 unused
__SWITCH_ON_LED_2 00000000

Symbol: __SWITCH_ON_LED_2
   Definitions
      At line 42 in file RD_BV_MAIN.s
   Uses
      At line 225 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_2 used once
__WAIT_A_TIME 00000000

Symbol: __WAIT_A_TIME
   Definitions
      At line 55 in file RD_BV_MAIN.s
   Uses
      At line 166 in file RD_BV_MAIN.s
      At line 173 in file RD_BV_MAIN.s
      At line 186 in file RD_BV_MAIN.s

__WAIT_HALF_ROTATION 00000000

Symbol: __WAIT_HALF_ROTATION
   Definitions
      At line 54 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
External symbols

      At line 123 in file RD_BV_MAIN.s
      At line 133 in file RD_BV_MAIN.s

36 symbols
402 symbols in table
