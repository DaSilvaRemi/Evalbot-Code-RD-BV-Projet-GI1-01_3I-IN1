


ARM Macro Assembler    Page 1 


    1 00000000         ; TIME X TO WAIT WHILE EVALBOT MOVE ON X AXE
    2 00000000 0090F560 
                       TEMPS_X EQU              0x90f560
    3 00000000         ; TIME Y TO WAIT WHILE EVALBOT MOVE ON Y AXE
    4 00000000 00469268 
                       TEMPS_Y EQU              0x469268
    5 00000000         
    6 00000000                 AREA             _MAIN_PROGRAM_, CODE, READONLY
    7 00000000                 ENTRY
    8 00000000                 EXPORT           __main
    9 00000000         
   10 00000000         ;----------------------------------------IMPORT---------
                       ---------------------------------------;
   11 00000000         ;----------------------ENGINE-----------------;
   12 00000000                 IMPORT           __ENGINE_INIT ; init engine (co
                                                            nfigure pwms + GPIO
                                                            )
   13 00000000                 IMPORT           __ENGINE_RIGHT_ON ; activate ri
                                                            ght engine
   14 00000000                 IMPORT           __ENGINE_RIGHT_OFF ; desactivat
                                                            e right engine
   15 00000000                 IMPORT           __ENGINE_RIGHT_FRONT ; right  e
                                                            ngine go forward
   16 00000000                 IMPORT           __ENGINE_RIGHT_BACK ; right eng
                                                            ine go backward
   17 00000000                 IMPORT           __ENGINE_RIGHT_INVERSE ; invers
                                                            e rotation directio
                                                            n of roght engine
   18 00000000                 IMPORT           __ENGINE_LEFT_ON ; activate lef
                                                            t engine
   19 00000000                 IMPORT           __ENGINE_LEFT_OFF ; desactivate
                                                             left engine
   20 00000000                 IMPORT           __ENGINE_LEFT_FRONT ; left  eng
                                                            ine go forward
   21 00000000                 IMPORT           __ENGINE_LEFT_BACK ; left  engi
                                                            ne go backward
   22 00000000                 IMPORT           __ENGINE_LEFT_INVERSE ; inverse
                                                             rotation direction
                                                             of left engine
   23 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_ON ; activa
                                                            te right and left e
                                                            ngine
   24 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_OFF ; desac
                                                            tivate right and le
                                                            ft engine
   25 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_FRONT ; lef
                                                            t and right  engine
                                                             go forward
   26 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_BACK ; left
                                                             and right  engine 
                                                            go backward
   27 00000000                 IMPORT           __ENGINE_LEFT_BACK_RIGHT_FRONT 
                                                            ; left engine go ba
                                                            ckward and right  e
                                                            ngine go frontward
   28 00000000                 IMPORT           __ENGINE_LEFT_FRONT_RIGHT_BACK 
                                                            ; left engine go fr
                                                            ontward and right  
                                                            engine go backward



ARM Macro Assembler    Page 2 


   29 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_INVERSE ; i
                                                            nverse rotation dir
                                                            ection of right & l
                                                            eft engine
   30 00000000         
   31 00000000         ;----------------------SWITCH-----------------;
   32 00000000                 IMPORT           __CONFIG_SW ; configure SW (con
                                                            figure pwms + GPIO)
                                                            
   33 00000000                 IMPORT           __READ_STATE_SW_1 
                                                            ;Read state of SW1
   34 00000000                 IMPORT           __READ_STATE_SW_2 
                                                            ;Read state of SW2
   35 00000000         
   36 00000000         ;----------------------BUMPER-----------------;
   37 00000000                 IMPORT           __CONFIG_BUMPER ; configure Bum
                                                            per (configure pwms
                                                             + GPIO)
   38 00000000                 IMPORT           __READ_STATE_BUMPER_1 ;Read sta
                                                            te of Bumper 1
   39 00000000                 IMPORT           __READ_STATE_BUMPER_2 ;Read sta
                                                            te of Bumper 2
   40 00000000         
   41 00000000         ;----------------------LED-----------------;
   42 00000000                 IMPORT           __CONFIG_LED ; configure Led (c
                                                            onfigure pwms + GPI
                                                            O)
   43 00000000                 IMPORT           __SWITCH_ON_LED_1 
                                                            ;Switch on LED1
   44 00000000                 IMPORT           __SWITCH_ON_LED_2 
                                                            ;Switch off LED2
   45 00000000                 IMPORT           __SWITCH_ON_LED_1_2 ;Switch off
                                                             LED1 1 & 2
   46 00000000                 IMPORT           __SWITCH_OFF_LED_1 
                                                            ;Switch on LED2
   47 00000000                 IMPORT           __SWITCH_OFF_LED_2 
                                                            ;Switch off LED2
   48 00000000                 IMPORT           __SWITCH_OFF_LED_1_2 ;Switch of
                                                            f LED1 1 & 2
   49 00000000                 IMPORT           __BLINK_LED_1_2 
                                                            ;Blink LED 1 & 2
   50 00000000         
   51 00000000         ;----------------------TOOLS-----------------;
   52 00000000                 IMPORT           __WAIT      ;WAIT A DEFAULT TIM
                                                            E
   53 00000000                 IMPORT           __WAIT_HALF_ROTATION ; WAIT HAL
                                                             ROTATION OF EVALBO
                                                            T
   54 00000000                 IMPORT           __WAIT_A_TIME ; WAIT A TIME SET
                                                             IN PARAM
   55 00000000         
   56 00000000         ;----------------------------------------START MAIN-----
                       -------------------------------------------;
   57 00000000         
   58 00000000         ;;;
   59 00000000         ;;main program
   60 00000000         ;;;
   61 00000000         __main
   62 00000000         ;------------------CONFIG SW, BUMPER and init ENGINE----



ARM Macro Assembler    Page 3 


                       ----------------------;
   63 00000000 F000 F816       BL               __INIT_START ;init engine and S
                                                            W and wait SW2 to b
                                                            e activated
   64 00000004 F7FF FFFE       BL               __CONFIG_BUMPER ; config bumper
                                                             after SW2 is activ
                                                            ated
   65 00000008         
   66 00000008         ;------------------WAIT TO HIT START WALL---------------
                       -----------;
   67 00000008         start_while_is_start_wall
   68 00000008 F7FF FFFE       BL               __READ_STATE_BUMPER_1
   69 0000000C D002            BEQ              end_while_is_start_wall
   70 0000000E         
   71 0000000E F7FF FFFE       BL               __READ_STATE_BUMPER_2
   72 00000012 D1F9            BNE              start_while_is_start_wall
   73 00000014         
   74 00000014         ;------------------WAIT TO HIT END WALL-----------------
                       ---------;
   75 00000014         end_while_is_start_wall
   76 00000014 F000 F82C       BL               __WHILE_IS_NOT_END_WALL ;Lauchn
                                                             binary counter and
                                                             wait to hit end
   77 00000018         
   78 00000018         ;------------------STOP ENGINE AND WAIT USER ACTION-----
                       ---------------------;
   79 00000018 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_OFF
   80 0000001C F7FF FFFE       BL               __CONFIG_SW
   81 00000020 F7FF FFFE       BL               __CONFIG_LED ;CONFIG LED to dis
                                                            play MSG
   82 00000024         
   83 00000024         ;------------WAIT USER PRESSED SW1-------------;
   84 00000024         sw1
   85 00000024 F7FF FFFE       BL               __READ_STATE_SW_1
   86 00000028 D1FC            BNE              sw1
   87 0000002A         
   88 0000002A         ;If user press SW1 display MSG
   89 0000002A F000 F84E       BL               __DISPLAY_BINARY_MSG
   90 0000002E         
   91 0000002E E7F9            B                sw1
   92 00000030         
   93 00000030         ;----------------------------------------END MAIN-------
                       -----------------------------------------;
   94 00000030         
   95 00000030         ;----------------------------------------START INIT STAR
                       T------------------------------------------------;
   96 00000030         
   97 00000030         ;;;
   98 00000030         ;;INIT the engine and config SWITCH. Wait SW2 is activat
                       ed and turn on engine.
   99 00000030         ;;;
  100 00000030         __INIT_START
  101 00000030 E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
  102 00000034         
  103 00000034         ;;CONFIG ENGINE AND SW
  104 00000034 F7FF FFFE       BL               __ENGINE_INIT
  105 00000038 F7FF FFFE       BL               __CONFIG_SW
  106 0000003C         
  107 0000003C         ;;WAIT SW2 TO BE PRESSED



ARM Macro Assembler    Page 4 


  108 0000003C         sw2
  109 0000003C F7FF FFFE       BL               __READ_STATE_SW_2
  110 00000040 D1FC            BNE              sw2
  111 00000042         
  112 00000042         ;;TURN ON ENGINE
  113 00000042 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_ON
  114 00000046 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  115 0000004A         
  116 0000004A E8BD 9C41       POP              { R0, R6, R10-R12, PC }
  117 0000004E         
  118 0000004E         ;----------------------------------------END INIT START-
                       -----------------------------------------------;
  119 0000004E         
  120 0000004E         ;----------------------------------------START INIT AFTE
                       R SW2------------------------------------------------;
  121 0000004E         
  122 0000004E         ;;;
  123 0000004E         ;; LOAD WAIT TIME and SET the registor to MSG
  124 0000004E         ;;;
  125 0000004E         __INIT_AFTER_SW2
  126 0000004E 4A2E            LDR              R2, =TEMPS_X
  127 00000050 4B2E            LDR              R3, =TEMPS_Y
  128 00000052 F04F 0700       LDR              R7, =2_00000000
  129 00000056 4770            BX               LR
  130 00000058         
  131 00000058         ;----------------------------------------END INIT AFTER 
                       SW2------------------------------------------------;
  132 00000058         
  133 00000058         ;----------------------------------------START TURN 90 R
                       IGHT------------------------------------------------;
  134 00000058         ;;;
  135 00000058         ;; LOAD 90 degrees to the right
  136 00000058         ;;;
  137 00000058         __TURN_90_RIGHT
  138 00000058 B543            PUSH             { R0, R1, R6, LR }
  139 0000005A F7FF FFFE       BL               __ENGINE_LEFT_FRONT_RIGHT_BACK
  140 0000005E F7FF FFFE       BL               __WAIT_HALF_ROTATION
  141 00000062 BD43            POP              { R0, R1, R6, PC }
  142 00000064         
  143 00000064         ;----------------------------------------END TURN 90 RIG
                       HT------------------------------------------------;
  144 00000064         
  145 00000064         ;----------------------------------------START TURN 90 L
                       EFT------------------------------------------------;
  146 00000064         ;;;
  147 00000064         ;; LOAD 90 degrees to the left
  148 00000064         ;;;
  149 00000064         __TURN_90_LEFT
  150 00000064 B543            PUSH             { R0, R1, R6, LR }
  151 00000066 F7FF FFFE       BL               __ENGINE_LEFT_BACK_RIGHT_FRONT
  152 0000006A F7FF FFFE       BL               __WAIT_HALF_ROTATION
  153 0000006E BD43            POP              { R0, R1, R6, PC }
  154 00000070         
  155 00000070         ;----------------------------------------END TURN 90 LEF
                       T------------------------------------------------;
  156 00000070         
  157 00000070         ;----------------------------------------START WHILE IS 
                       NOT END WALL--------------------------------------------
                       ----;



ARM Macro Assembler    Page 5 


  158 00000070         
  159 00000070         ;;;
  160 00000070         ;;SAVE 1 or 0 while evalbot doesn't bump END wall
  161 00000070         ;;
  162 00000070         ;;@returns BINARY MSG LOAD IN R7
  163 00000070         ;;;
  164 00000070         __WHILE_IS_NOT_END_WALL
  165 00000070 E92D 477F       PUSH             { R0-R6, R8-R10, LR }
  166 00000074         init_startup_while_var
  167 00000074         ;INIT REGISTER
  168 00000074 F7FF FFEB       BL               __INIT_AFTER_SW2
  169 00000078 F04F 0501       LDR              R5, =2_00000001
  170 0000007C         
  171 0000007C         start_while_is_not_end_wall
  172 0000007C         
  173 0000007C F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_BACK
  174 00000080         ;GO BACK AFTER HIT OR NOT A WALL
  175 00000080         wait_to_be_outside_range_Y_DOWN
  176 00000080 4619            MOV              R1, R3      ;LOAD Y WAIT TIME I
                                                            N WAIT PARAMETER
  177 00000082 F7FF FFFE       BL               __WAIT_A_TIME 
                                                            ;WAIT THE SET TIME
  178 00000086         
  179 00000086         move_to_the_right
  180 00000086 F7FF FFE7       BL               __TURN_90_RIGHT
  181 0000008A F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT 
                                                            ;GO to the front
  182 0000008E         
  183 0000008E         wait_to_be_outside_range_X
  184 0000008E 4611            MOV              R1, R2      ;LOAD X WAIT TIME I
                                                            N WAIT PARAMETER
  185 00000090 F7FF FFFE       BL               __WAIT_A_TIME
  186 00000094         
  187 00000094         ;Check if evablot was bumped the evalbot during he runs 
                       in x Axes
  188 00000094         end_wall_is_bumped
  189 00000094 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  190 00000098 D015            BEQ              end_while_is_not_end_wall
  191 0000009A         
  192 0000009A F7FF FFFE       BL               __READ_STATE_BUMPER_2
  193 0000009E D012            BEQ              end_while_is_not_end_wall
  194 000000A0         
  195 000000A0         ;If evalvot doesn't bump wall we turn to the left and co
                       ntinue searching wall
  196 000000A0         move_to_the_up
  197 000000A0 F7FF FFE0       BL               __TURN_90_LEFT
  198 000000A4 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  199 000000A8         
  200 000000A8         wait_to_be_outside_range_Y_UP
  201 000000A8 4619            MOV              R1, R3      ;LOAD Y WAIT TIME I
                                                            N WAIT PARAMETER
  202 000000AA F7FF FFFE       BL               __WAIT_A_TIME 
                                                            ;WAIT THE SET TIME
  203 000000AE         
  204 000000AE         ;Check if evalbot bump binary wall
  205 000000AE         basic_wall_is_bumped
  206 000000AE F7FF FFFE       BL               __READ_STATE_BUMPER_1
  207 000000B2 D003            BEQ              save_1_binary
  208 000000B4         



ARM Macro Assembler    Page 6 


  209 000000B4 F7FF FFFE       BL               __READ_STATE_BUMPER_2
  210 000000B8 D000            BEQ              save_1_binary
  211 000000BA E001            B                shift_binary_mask
  212 000000BC         
  213 000000BC         save_1_binary
  214 000000BC         ;If evalbot bump a wall we save 1 Else 0 by default
  215 000000BC EA45 0707       ORR              R7, R5, R7  ;Set the 1 binary i
                                                            n message register 
                                                            with mask example 0
                                                            001 0111 | 0010 000
                                                            0 = 0011 0111
  216 000000C0         
  217 000000C0         shift_binary_mask
  218 000000C0 EA4F 0545       LSL              R5, #1      ; Shift the mask to
                                                             set the the bit at
                                                             good position exam
                                                            ple 0000 0001 << 1 
                                                            = 0000 0010
  219 000000C4 E7DA            B                start_while_is_not_end_wall
  220 000000C6         
  221 000000C6         end_while_is_not_end_wall
  222 000000C6 E8BD 877F       POP              { R0-R6, R8-R10, PC }
  223 000000CA         
  224 000000CA         ;----------------------------------------END WHILE IS NO
                       T END WALL----------------------------------------------
                       --;
  225 000000CA         
  226 000000CA         ;----------------------------------------START DISPLAY_B
                       INARY_MSG-----------------------------------------------
                       -;
  227 000000CA         
  228 000000CA         __DISPLAY_BINARY_MSG
  229 000000CA B5DF            PUSH             { R0-R4, R6, R7, LR }
  230 000000CC         
  231 000000CC         ;Before start we  blink the led to inform user we start 
                       display msg
  232 000000CC F04F 0300       LDR              R3, =0
  233 000000D0 F7FF FFFE       BL               __BLINK_LED_1_2
  234 000000D4         
  235 000000D4         ;;Display the binary msg with LED
  236 000000D4         start_while_binary_msg
  237 000000D4 2B08            CMP              R3, #8      ;If we display a by
                                                            te we stop the disp
                                                            lay
  238 000000D6 D016            BEQ              end_while_binary_msg
  239 000000D8         
  240 000000D8 F007 0201       AND              R2, R7, #2_00000001 ;We do and 
                                                            AND operation with 
                                                            a mask and the valu
                                                            e of msg
  241 000000DC         
  242 000000DC 2A01            CMP              R2, #1      ;If R7 value & 0000
                                                            0001 = 1 it's a wal
                                                            l so we display 1 w
                                                            ith a LED
  243 000000DE D002            BEQ              display_1
  244 000000E0         
  245 000000E0 2A00            CMP              R2, #0      ;If R7 value & 0000
                                                            0001 = 0 it's not a



ARM Macro Assembler    Page 7 


                                                             wall so we display
                                                             0 with a LED
  246 000000E2 D003            BEQ              display_0
  247 000000E4 E004            B                end_display
  248 000000E6         
  249 000000E6         display_1
  250 000000E6 F7FF FFFE       BL               __SWITCH_ON_LED_2 ;Display a 1
  251 000000EA E001            B                end_display
  252 000000EC         
  253 000000EC         display_0
  254 000000EC F7FF FFFE       BL               __SWITCH_ON_LED_1 ;Display a 0
  255 000000F0         end_display
  256 000000F0 F7FF FFFE       BL               __WAIT      ;WAIT USER READING 
                                                            TIME
  257 000000F4 F7FF FFFE       BL               __SWITCH_OFF_LED_1_2 
                                                            ; SWITCH OFF 2 LED
  258 000000F8         
  259 000000F8 F103 0301       ADD              R3, #1      ;ADD THE CPT TO KNO
                                                            W WHAT BIT WE NEED 
                                                            TO DISPLAY
  260 000000FC EA4F 0757       LSR              R7, #1      ;Logical Shit Right
                                                             in the message to 
                                                            display from the LS
                                                            B to HSB
  261 00000100 F7FF FFFE       BL               __WAIT      ;WAIT
  262 00000104 E7E6            B                start_while_binary_msg ;Continu
                                                            e display while it'
                                                            s not 8
  263 00000106         end_while_binary_msg
  264 00000106         
  265 00000106 BDDF            POP              { R0-R4, R6, R7, PC }
  266 00000108         
  267 00000108         ;----------------------------------------END DISPLAY_BIN
                       ARY_MSG------------------------------------------------;
                       
  268 00000108         
  269 00000108         end_p
  270 00000108                 END
              0090F560 
              00469268 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rd_bv_main.d -o.\objects\rd_bv_main.o -I.\RTE\_Target_1 
-ID:\ProgramFiles\Armv52\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\ProgramFiles\A
rmv52\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="A
RMCM3 SETA 1" --list=.\listings\rd_bv_main.lst RD_BV_MAIN.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

_MAIN_PROGRAM_ 00000000

Symbol: _MAIN_PROGRAM_
   Definitions
      At line 6 in file RD_BV_MAIN.s
   Uses
      None
Comment: _MAIN_PROGRAM_ unused
__DISPLAY_BINARY_MSG 000000CA

Symbol: __DISPLAY_BINARY_MSG
   Definitions
      At line 228 in file RD_BV_MAIN.s
   Uses
      At line 89 in file RD_BV_MAIN.s
Comment: __DISPLAY_BINARY_MSG used once
__INIT_AFTER_SW2 0000004E

Symbol: __INIT_AFTER_SW2
   Definitions
      At line 125 in file RD_BV_MAIN.s
   Uses
      At line 168 in file RD_BV_MAIN.s
Comment: __INIT_AFTER_SW2 used once
__INIT_START 00000030

Symbol: __INIT_START
   Definitions
      At line 100 in file RD_BV_MAIN.s
   Uses
      At line 63 in file RD_BV_MAIN.s
Comment: __INIT_START used once
__TURN_90_LEFT 00000064

Symbol: __TURN_90_LEFT
   Definitions
      At line 149 in file RD_BV_MAIN.s
   Uses
      At line 197 in file RD_BV_MAIN.s
Comment: __TURN_90_LEFT used once
__TURN_90_RIGHT 00000058

Symbol: __TURN_90_RIGHT
   Definitions
      At line 137 in file RD_BV_MAIN.s
   Uses
      At line 180 in file RD_BV_MAIN.s
Comment: __TURN_90_RIGHT used once
__WHILE_IS_NOT_END_WALL 00000070

Symbol: __WHILE_IS_NOT_END_WALL
   Definitions
      At line 164 in file RD_BV_MAIN.s
   Uses
      At line 76 in file RD_BV_MAIN.s
Comment: __WHILE_IS_NOT_END_WALL used once
__main 00000000

Symbol: __main



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 61 in file RD_BV_MAIN.s
   Uses
      At line 8 in file RD_BV_MAIN.s
Comment: __main used once
basic_wall_is_bumped 000000AE

Symbol: basic_wall_is_bumped
   Definitions
      At line 205 in file RD_BV_MAIN.s
   Uses
      None
Comment: basic_wall_is_bumped unused
display_0 000000EC

Symbol: display_0
   Definitions
      At line 253 in file RD_BV_MAIN.s
   Uses
      At line 246 in file RD_BV_MAIN.s
Comment: display_0 used once
display_1 000000E6

Symbol: display_1
   Definitions
      At line 249 in file RD_BV_MAIN.s
   Uses
      At line 243 in file RD_BV_MAIN.s
Comment: display_1 used once
end_display 000000F0

Symbol: end_display
   Definitions
      At line 255 in file RD_BV_MAIN.s
   Uses
      At line 247 in file RD_BV_MAIN.s
      At line 251 in file RD_BV_MAIN.s

end_p 00000108

Symbol: end_p
   Definitions
      At line 269 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_p unused
end_wall_is_bumped 00000094

Symbol: end_wall_is_bumped
   Definitions
      At line 188 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_wall_is_bumped unused
end_while_binary_msg 00000106

Symbol: end_while_binary_msg
   Definitions
      At line 263 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 238 in file RD_BV_MAIN.s
Comment: end_while_binary_msg used once
end_while_is_not_end_wall 000000C6

Symbol: end_while_is_not_end_wall
   Definitions
      At line 221 in file RD_BV_MAIN.s
   Uses
      At line 190 in file RD_BV_MAIN.s
      At line 193 in file RD_BV_MAIN.s

end_while_is_start_wall 00000014

Symbol: end_while_is_start_wall
   Definitions
      At line 75 in file RD_BV_MAIN.s
   Uses
      At line 69 in file RD_BV_MAIN.s
Comment: end_while_is_start_wall used once
init_startup_while_var 00000074

Symbol: init_startup_while_var
   Definitions
      At line 166 in file RD_BV_MAIN.s
   Uses
      None
Comment: init_startup_while_var unused
move_to_the_right 00000086

Symbol: move_to_the_right
   Definitions
      At line 179 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_right unused
move_to_the_up 000000A0

Symbol: move_to_the_up
   Definitions
      At line 196 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_up unused
save_1_binary 000000BC

Symbol: save_1_binary
   Definitions
      At line 213 in file RD_BV_MAIN.s
   Uses
      At line 207 in file RD_BV_MAIN.s
      At line 210 in file RD_BV_MAIN.s

shift_binary_mask 000000C0

Symbol: shift_binary_mask
   Definitions
      At line 217 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 211 in file RD_BV_MAIN.s
Comment: shift_binary_mask used once
start_while_binary_msg 000000D4

Symbol: start_while_binary_msg
   Definitions
      At line 236 in file RD_BV_MAIN.s
   Uses
      At line 262 in file RD_BV_MAIN.s
Comment: start_while_binary_msg used once
start_while_is_not_end_wall 0000007C

Symbol: start_while_is_not_end_wall
   Definitions
      At line 171 in file RD_BV_MAIN.s
   Uses
      At line 219 in file RD_BV_MAIN.s
Comment: start_while_is_not_end_wall used once
start_while_is_start_wall 00000008

Symbol: start_while_is_start_wall
   Definitions
      At line 67 in file RD_BV_MAIN.s
   Uses
      At line 72 in file RD_BV_MAIN.s
Comment: start_while_is_start_wall used once
sw1 00000024

Symbol: sw1
   Definitions
      At line 84 in file RD_BV_MAIN.s
   Uses
      At line 86 in file RD_BV_MAIN.s
      At line 91 in file RD_BV_MAIN.s

sw2 0000003C

Symbol: sw2
   Definitions
      At line 108 in file RD_BV_MAIN.s
   Uses
      At line 110 in file RD_BV_MAIN.s
Comment: sw2 used once
wait_to_be_outside_range_X 0000008E

Symbol: wait_to_be_outside_range_X
   Definitions
      At line 183 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_X unused
wait_to_be_outside_range_Y_DOWN 00000080

Symbol: wait_to_be_outside_range_Y_DOWN
   Definitions
      At line 175 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_DOWN unused



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

wait_to_be_outside_range_Y_UP 000000A8

Symbol: wait_to_be_outside_range_Y_UP
   Definitions
      At line 200 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_UP unused
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TEMPS_X 0090F560

Symbol: TEMPS_X
   Definitions
      At line 2 in file RD_BV_MAIN.s
   Uses
      At line 126 in file RD_BV_MAIN.s
Comment: TEMPS_X used once
TEMPS_Y 00469268

Symbol: TEMPS_Y
   Definitions
      At line 4 in file RD_BV_MAIN.s
   Uses
      At line 127 in file RD_BV_MAIN.s
Comment: TEMPS_Y used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__BLINK_LED_1_2 00000000

Symbol: __BLINK_LED_1_2
   Definitions
      At line 49 in file RD_BV_MAIN.s
   Uses
      At line 233 in file RD_BV_MAIN.s
Comment: __BLINK_LED_1_2 used once
__CONFIG_BUMPER 00000000

Symbol: __CONFIG_BUMPER
   Definitions
      At line 37 in file RD_BV_MAIN.s
   Uses
      At line 64 in file RD_BV_MAIN.s
Comment: __CONFIG_BUMPER used once
__CONFIG_LED 00000000

Symbol: __CONFIG_LED
   Definitions
      At line 42 in file RD_BV_MAIN.s
   Uses
      At line 81 in file RD_BV_MAIN.s
Comment: __CONFIG_LED used once
__CONFIG_SW 00000000

Symbol: __CONFIG_SW
   Definitions
      At line 32 in file RD_BV_MAIN.s
   Uses
      At line 80 in file RD_BV_MAIN.s
      At line 105 in file RD_BV_MAIN.s

__ENGINE_INIT 00000000

Symbol: __ENGINE_INIT
   Definitions
      At line 12 in file RD_BV_MAIN.s
   Uses
      At line 104 in file RD_BV_MAIN.s
Comment: __ENGINE_INIT used once
__ENGINE_LEFT_BACK 00000000

Symbol: __ENGINE_LEFT_BACK
   Definitions
      At line 21 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_BACK unused
__ENGINE_LEFT_BACK_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_BACK_RIGHT_FRONT
   Definitions
      At line 27 in file RD_BV_MAIN.s
   Uses
      At line 151 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_BACK_RIGHT_FRONT used once
__ENGINE_LEFT_FRONT 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: __ENGINE_LEFT_FRONT
   Definitions
      At line 20 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_FRONT unused
__ENGINE_LEFT_FRONT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_FRONT_RIGHT_BACK
   Definitions
      At line 28 in file RD_BV_MAIN.s
   Uses
      At line 139 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_FRONT_RIGHT_BACK used once
__ENGINE_LEFT_INVERSE 00000000

Symbol: __ENGINE_LEFT_INVERSE
   Definitions
      At line 22 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_INVERSE unused
__ENGINE_LEFT_OFF 00000000

Symbol: __ENGINE_LEFT_OFF
   Definitions
      At line 19 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_OFF unused
__ENGINE_LEFT_ON 00000000

Symbol: __ENGINE_LEFT_ON
   Definitions
      At line 18 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_ON unused
__ENGINE_LEFT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_RIGHT_BACK
   Definitions
      At line 26 in file RD_BV_MAIN.s
   Uses
      At line 173 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_BACK used once
__ENGINE_LEFT_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_RIGHT_FRONT
   Definitions
      At line 25 in file RD_BV_MAIN.s
   Uses
      At line 114 in file RD_BV_MAIN.s
      At line 181 in file RD_BV_MAIN.s
      At line 198 in file RD_BV_MAIN.s

__ENGINE_LEFT_RIGHT_INVERSE 00000000

Symbol: __ENGINE_LEFT_RIGHT_INVERSE



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

   Definitions
      At line 29 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_INVERSE unused
__ENGINE_LEFT_RIGHT_OFF 00000000

Symbol: __ENGINE_LEFT_RIGHT_OFF
   Definitions
      At line 24 in file RD_BV_MAIN.s
   Uses
      At line 79 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_OFF used once
__ENGINE_LEFT_RIGHT_ON 00000000

Symbol: __ENGINE_LEFT_RIGHT_ON
   Definitions
      At line 23 in file RD_BV_MAIN.s
   Uses
      At line 113 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_ON used once
__ENGINE_RIGHT_BACK 00000000

Symbol: __ENGINE_RIGHT_BACK
   Definitions
      At line 16 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_BACK unused
__ENGINE_RIGHT_FRONT 00000000

Symbol: __ENGINE_RIGHT_FRONT
   Definitions
      At line 15 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_FRONT unused
__ENGINE_RIGHT_INVERSE 00000000

Symbol: __ENGINE_RIGHT_INVERSE
   Definitions
      At line 17 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_INVERSE unused
__ENGINE_RIGHT_OFF 00000000

Symbol: __ENGINE_RIGHT_OFF
   Definitions
      At line 14 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_OFF unused
__ENGINE_RIGHT_ON 00000000

Symbol: __ENGINE_RIGHT_ON
   Definitions
      At line 13 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      None
Comment: __ENGINE_RIGHT_ON unused
__READ_STATE_BUMPER_1 00000000

Symbol: __READ_STATE_BUMPER_1
   Definitions
      At line 38 in file RD_BV_MAIN.s
   Uses
      At line 68 in file RD_BV_MAIN.s
      At line 189 in file RD_BV_MAIN.s
      At line 206 in file RD_BV_MAIN.s

__READ_STATE_BUMPER_2 00000000

Symbol: __READ_STATE_BUMPER_2
   Definitions
      At line 39 in file RD_BV_MAIN.s
   Uses
      At line 71 in file RD_BV_MAIN.s
      At line 192 in file RD_BV_MAIN.s
      At line 209 in file RD_BV_MAIN.s

__READ_STATE_SW_1 00000000

Symbol: __READ_STATE_SW_1
   Definitions
      At line 33 in file RD_BV_MAIN.s
   Uses
      At line 85 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_1 used once
__READ_STATE_SW_2 00000000

Symbol: __READ_STATE_SW_2
   Definitions
      At line 34 in file RD_BV_MAIN.s
   Uses
      At line 109 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_2 used once
__SWITCH_OFF_LED_1 00000000

Symbol: __SWITCH_OFF_LED_1
   Definitions
      At line 46 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_OFF_LED_1 unused
__SWITCH_OFF_LED_1_2 00000000

Symbol: __SWITCH_OFF_LED_1_2
   Definitions
      At line 48 in file RD_BV_MAIN.s
   Uses
      At line 257 in file RD_BV_MAIN.s
Comment: __SWITCH_OFF_LED_1_2 used once
__SWITCH_OFF_LED_2 00000000

Symbol: __SWITCH_OFF_LED_2
   Definitions
      At line 47 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: __SWITCH_OFF_LED_2 unused
__SWITCH_ON_LED_1 00000000

Symbol: __SWITCH_ON_LED_1
   Definitions
      At line 43 in file RD_BV_MAIN.s
   Uses
      At line 254 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_1 used once
__SWITCH_ON_LED_1_2 00000000

Symbol: __SWITCH_ON_LED_1_2
   Definitions
      At line 45 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_1_2 unused
__SWITCH_ON_LED_2 00000000

Symbol: __SWITCH_ON_LED_2
   Definitions
      At line 44 in file RD_BV_MAIN.s
   Uses
      At line 250 in file RD_BV_MAIN.s
Comment: __SWITCH_ON_LED_2 used once
__WAIT 00000000

Symbol: __WAIT
   Definitions
      At line 52 in file RD_BV_MAIN.s
   Uses
      At line 256 in file RD_BV_MAIN.s
      At line 261 in file RD_BV_MAIN.s

__WAIT_A_TIME 00000000

Symbol: __WAIT_A_TIME
   Definitions
      At line 54 in file RD_BV_MAIN.s
   Uses
      At line 177 in file RD_BV_MAIN.s
      At line 185 in file RD_BV_MAIN.s
      At line 202 in file RD_BV_MAIN.s

__WAIT_HALF_ROTATION 00000000

Symbol: __WAIT_HALF_ROTATION
   Definitions
      At line 53 in file RD_BV_MAIN.s
   Uses
      At line 140 in file RD_BV_MAIN.s
      At line 152 in file RD_BV_MAIN.s

35 symbols
403 symbols in table
