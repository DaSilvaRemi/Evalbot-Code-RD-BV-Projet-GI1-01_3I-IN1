


ARM Macro Assembler    Page 1 


    1 00000000 00A037A0 
                       TEMPS_X EQU              0xa037a0
    2 00000000 00A037A0 
                       TEMPS_Y EQU              0xa037a0
    3 00000000         
    4 00000000                 AREA             _MAIN_PROGRAM_, CODE, READONLY
    5 00000000                 ENTRY
    6 00000000                 EXPORT           __main
    7 00000000         
    8 00000000         ;----------------------------------------IMPORT---------
                       ---------------------------------------;
    9 00000000         ;----------------------ENGINE-----------------;
   10 00000000                 IMPORT           __ENGINE_INIT ; init engine (co
                                                            nfigure pwms + GPIO
                                                            )
   11 00000000                 IMPORT           __ENGINE_RIGHT_ON ; activate ri
                                                            ght engine
   12 00000000                 IMPORT           __ENGINE_RIGHT_OFF ; desactivat
                                                            e right engine
   13 00000000                 IMPORT           __ENGINE_RIGHT_FRONT ; right  e
                                                            ngine go forward
   14 00000000                 IMPORT           __ENGINE_RIGHT_BACK ; right eng
                                                            ine go backward
   15 00000000                 IMPORT           __ENGINE_RIGHT_INVERSE ; invers
                                                            e rotation directio
                                                            n of roght engine
   16 00000000                 IMPORT           __ENGINE_LEFT_ON ; activate lef
                                                            t engine
   17 00000000                 IMPORT           __ENGINE_LEFT_OFF ; desactivate
                                                             left engine
   18 00000000                 IMPORT           __ENGINE_LEFT_FRONT ; left  eng
                                                            ine go forward
   19 00000000                 IMPORT           __ENGINE_LEFT_BACK ; left  engi
                                                            ne go backward
   20 00000000                 IMPORT           __ENGINE_LEFT_INVERSE ; inverse
                                                             rotation direction
                                                             of left engine
   21 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_ON ; activa
                                                            te right and left e
                                                            ngine
   22 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_OFF ; desac
                                                            tivate right and le
                                                            ft engine
   23 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_FRONT ; lef
                                                            t and right  engine
                                                             go forward
   24 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_BACK ; left
                                                             and right  engine 
                                                            go backward
   25 00000000                 IMPORT           __ENGINE_LEFT_BACK_RIGHT_FRONT 
                                                            ; left engine go ba
                                                            ckward and right  e
                                                            ngine go frontward
   26 00000000                 IMPORT           __ENGINE_LEFT_FRONT_RIGHT_BACK 
                                                            ; left engine go fr
                                                            ontward and right  
                                                            engine go backward
   27 00000000                 IMPORT           __ENGINE_LEFT_RIGHT_INVERSE ; i
                                                            nverse rotation dir



ARM Macro Assembler    Page 2 


                                                            ection of right & l
                                                            eft engine
   28 00000000         
   29 00000000         ;----------------------SWITCH-----------------;
   30 00000000                 IMPORT           __CONFIG_SW ; configure SW (con
                                                            figure pwms + GPIO)
                                                            
   31 00000000                 IMPORT           __READ_STATE_SW_1 
                                                            ;Read state of SW1
   32 00000000                 IMPORT           __READ_STATE_SW_2 
                                                            ;Read state of SW2
   33 00000000         
   34 00000000         ;----------------------BUMPER-----------------;
   35 00000000                 IMPORT           __CONFIG_BUMPER ; configure Bum
                                                            per (configure pwms
                                                             + GPIO)
   36 00000000                 IMPORT           __READ_STATE_BUMPER_1 ;Read sta
                                                            te of Bumper 1
   37 00000000                 IMPORT           __READ_STATE_BUMPER_2 ;Read sta
                                                            te of Bumper 2
   38 00000000         
   39 00000000         ;----------------------LED-----------------;
   40 00000000                 IMPORT           __CONFIG_LED ; configure Led (c
                                                            onfigure pwms + GPI
                                                            O)
   41 00000000                 IMPORT           __SWITCH_ON_LED_1 
                                                            ;Switch on LED1
   42 00000000                 IMPORT           __SWITCH_ON_LED_2 
                                                            ;Switch off LED2
   43 00000000                 IMPORT           __SWITCH_ON_LED_1_2 ;Switch off
                                                             LED1 1 & 2
   44 00000000                 IMPORT           __SWITCH_OFF_LED_1 
                                                            ;Switch on LED2
   45 00000000                 IMPORT           __SWITCH_OFF_LED_2 
                                                            ;Switch off LED2
   46 00000000                 IMPORT           __SWITCH_OFF_LED_1_2 ;Switch of
                                                            f LED1 1 & 2
   47 00000000                 IMPORT           __BLINK_LED_1_2 
                                                            ;Blink LED 1 & 2
   48 00000000         
   49 00000000         ;----------------------TOOLS-----------------;
   50 00000000                 IMPORT           __WAIT_HALF_ROTATION
   51 00000000                 IMPORT           __WAIT_A_TIME
   52 00000000         
   53 00000000         ;----------------------------------------START MAIN-----
                       -------------------------------------------;
   54 00000000         
   55 00000000         __main
   56 00000000 F000 F80E       BL               __INIT_START
   57 00000004 F7FF FFFE       BL               __CONFIG_BUMPER
   58 00000008         
   59 00000008         start_while_is_start_wall
   60 00000008 F7FF FFFE       BL               __READ_STATE_BUMPER_1
   61 0000000C D002            BEQ              end_while_is_start_wall
   62 0000000E         
   63 0000000E F7FF FFFE       BL               __READ_STATE_BUMPER_2
   64 00000012 D1F9            BNE              start_while_is_start_wall
   65 00000014         
   66 00000014         end_while_is_start_wall



ARM Macro Assembler    Page 3 


   67 00000014 F000 F82A       BL               __WHILE_IS_NOT_END_WALL
   68 00000018         
   69 00000018         
   70 00000018         sw1
   71 00000018 F7FF FFFE       BL               __READ_STATE_SW_1
   72 0000001C D1FC            BNE              sw1
   73 0000001E         
   74 0000001E E058            B                end_p
   75 00000020         
   76 00000020         ;----------------------------------------END MAIN-------
                       -----------------------------------------;
   77 00000020         
   78 00000020         ;----------------------------------------START INIT STAR
                       T------------------------------------------------;
   79 00000020         
   80 00000020         __INIT_START
   81 00000020 E92D 5C41       PUSH             { R0, R6, R10-R12, LR }
   82 00000024         
   83 00000024 F7FF FFFE       BL               __ENGINE_INIT
   84 00000028 F7FF FFFE       BL               __CONFIG_SW
   85 0000002C         
   86 0000002C         sw2
   87 0000002C F7FF FFFE       BL               __READ_STATE_SW_2
   88 00000030 D1FC            BNE              sw2
   89 00000032         
   90 00000032 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_ON
   91 00000036 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
   92 0000003A         
   93 0000003A E8BD 9C41       POP              { R0, R6, R10-R12, PC }
   94 0000003E         
   95 0000003E         ;----------------------------------------END INIT START-
                       -----------------------------------------------;
   96 0000003E         
   97 0000003E         ;----------------------------------------START INIT AFTE
                       R SW2------------------------------------------------;
   98 0000003E         
   99 0000003E         __INIT_AFTER_SW2
  100 0000003E 4A25            LDR              R2, =TEMPS_X
  101 00000040 4B24            LDR              R3, =TEMPS_Y
  102 00000042 F04F 0700       LDR              R7, =2_00000000
  103 00000046 4770            BX               LR
  104 00000048         
  105 00000048         ;----------------------------------------END INIT AFTER 
                       SW2------------------------------------------------;
  106 00000048         
  107 00000048         ;----------------------------------------START TURN 90 R
                       IGHT------------------------------------------------;
  108 00000048         
  109 00000048         __TURN_90_RIGHT
  110 00000048 B543            PUSH             { R0, R1, R6, LR }
  111 0000004A F7FF FFFE       BL               __ENGINE_LEFT_FRONT_RIGHT_BACK
  112 0000004E F7FF FFFE       BL               __WAIT_HALF_ROTATION
  113 00000052 BD43            POP              { R0, R1, R6, PC }
  114 00000054         
  115 00000054         ;----------------------------------------END TURN 90 RIG
                       HT------------------------------------------------;
  116 00000054         
  117 00000054         ;----------------------------------------START TURN 90 L
                       EFT------------------------------------------------;



ARM Macro Assembler    Page 4 


  118 00000054         
  119 00000054         __TURN_90_LEFT
  120 00000054 B543            PUSH             { R0, R1, R6, LR }
  121 00000056 F7FF FFFE       BL               __ENGINE_LEFT_BACK_RIGHT_FRONT
  122 0000005A F7FF FFFE       BL               __WAIT_HALF_ROTATION
  123 0000005E BD43            POP              { R0, R1, R6, PC }
  124 00000060         
  125 00000060         ;----------------------------------------END TURN 90 LEF
                       T------------------------------------------------;
  126 00000060         
  127 00000060         
  128 00000060         ;----------------------------------------START TURN_ARRO
                       UND------------------------------------------------;
  129 00000060         
  130 00000060         __TURN_ARROUND
  131 00000060 B543            PUSH             { R0, R1, R6, LR }
  132 00000062 F7FF FFF1       BL               __TURN_90_RIGHT
  133 00000066 F7FF FFEF       BL               __TURN_90_RIGHT
  134 0000006A BD43            POP              { R0, R1, R6, PC }
  135 0000006C         
  136 0000006C         ;----------------------------------------END TURN_ARROUN
                       D------------------------------------------------;
  137 0000006C         
  138 0000006C         ;----------------------------------------START WHILE IS 
                       NOT END WALL--------------------------------------------
                       ----;
  139 0000006C         
  140 0000006C         __WHILE_IS_NOT_END_WALL
  141 0000006C E92D 5FFF       PUSH             { R0-R12, LR }
  142 00000070         init_startup_while_var
  143 00000070 F7FF FFE5       BL               __INIT_AFTER_SW2
  144 00000074 F04F 0400       LDR              R4, =0
  145 00000078 F04F 0501       LDR              R5, =2_00000001
  146 0000007C         
  147 0000007C         start_while_is_not_end_wall
  148 0000007C         
  149 0000007C         move_to_the_left
  150 0000007C F7FF FFF0       BL               __TURN_ARROUND
  151 00000080 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  152 00000084         
  153 00000084         wait_to_be_outside_range_Y_DOWN
  154 00000084 4619            MOV              R1, R3
  155 00000086 F7FF FFFE       BL               __WAIT_A_TIME
  156 0000008A         
  157 0000008A F7FF FFE3       BL               __TURN_90_LEFT
  158 0000008E F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT
  159 00000092         
  160 00000092         wait_to_be_outside_range_X
  161 00000092 4611            MOV              R1, R2
  162 00000094 F7FF FFFE       BL               __WAIT_A_TIME
  163 00000098         end_wall_is_bumped
  164 00000098 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  165 0000009C D017            BEQ              end_while_is_not_end_wall
  166 0000009E         
  167 0000009E F7FF FFFE       BL               __READ_STATE_BUMPER_2
  168 000000A2 D014            BEQ              end_while_is_not_end_wall
  169 000000A4         move_to_the_up
  170 000000A4 F7FF FFD6       BL               __TURN_90_LEFT
  171 000000A8 F7FF FFFE       BL               __ENGINE_LEFT_RIGHT_FRONT



ARM Macro Assembler    Page 5 


  172 000000AC         
  173 000000AC         wait_to_be_outside_range_Y_UP
  174 000000AC 4619            MOV              R1, R3
  175 000000AE F7FF FFFE       BL               __WAIT_A_TIME
  176 000000B2         
  177 000000B2         basic_wall_is_bumped
  178 000000B2 F7FF FFFE       BL               __READ_STATE_BUMPER_1
  179 000000B6 D003            BEQ              save_1_binary
  180 000000B8         
  181 000000B8 F7FF FFFE       BL               __READ_STATE_BUMPER_2
  182 000000BC D000            BEQ              save_1_binary
  183 000000BE E001            B                shift_binary_mask
  184 000000C0         
  185 000000C0         save_1_binary
  186 000000C0 EA45 0707       ORR              R7, R5, R7
  187 000000C4         
  188 000000C4         shift_binary_mask
  189 000000C4 FA05 F504       LSL              R5, R5, R4
  190 000000C8 F104 0401       ADD              R4, #1
  191 000000CC E7D6            B                start_while_is_not_end_wall
  192 000000CE         
  193 000000CE         end_while_is_not_end_wall
  194 000000CE E8BD 9FFF       POP              { R0-R12, PC }
  195 000000D2         
  196 000000D2         ;----------------------------------------END WHILE IS NO
                       T END WALL----------------------------------------------
                       --;
  197 000000D2         end_p
  198 000000D2                 END
              00 00 00A037A0 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\rd_bv_main.d -o.\objects\rd_bv_main.o -I.\RTE\_Target_1 
-ID:\ProgramFiles\Armv52\ARM\CMSIS\5.5.1\CMSIS\Core\Include -ID:\ProgramFiles\A
rmv52\ARM\CMSIS\5.5.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 528" --predefine="_RTE_ SETA 1" --predefine="A
RMCM3 SETA 1" --list=.\listings\rd_bv_main.lst RD_BV_MAIN.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

_MAIN_PROGRAM_ 00000000

Symbol: _MAIN_PROGRAM_
   Definitions
      At line 4 in file RD_BV_MAIN.s
   Uses
      None
Comment: _MAIN_PROGRAM_ unused
__INIT_AFTER_SW2 0000003E

Symbol: __INIT_AFTER_SW2
   Definitions
      At line 99 in file RD_BV_MAIN.s
   Uses
      At line 143 in file RD_BV_MAIN.s
Comment: __INIT_AFTER_SW2 used once
__INIT_START 00000020

Symbol: __INIT_START
   Definitions
      At line 80 in file RD_BV_MAIN.s
   Uses
      At line 56 in file RD_BV_MAIN.s
Comment: __INIT_START used once
__TURN_90_LEFT 00000054

Symbol: __TURN_90_LEFT
   Definitions
      At line 119 in file RD_BV_MAIN.s
   Uses
      At line 157 in file RD_BV_MAIN.s
      At line 170 in file RD_BV_MAIN.s

__TURN_90_RIGHT 00000048

Symbol: __TURN_90_RIGHT
   Definitions
      At line 109 in file RD_BV_MAIN.s
   Uses
      At line 132 in file RD_BV_MAIN.s
      At line 133 in file RD_BV_MAIN.s

__TURN_ARROUND 00000060

Symbol: __TURN_ARROUND
   Definitions
      At line 130 in file RD_BV_MAIN.s
   Uses
      At line 150 in file RD_BV_MAIN.s
Comment: __TURN_ARROUND used once
__WHILE_IS_NOT_END_WALL 0000006C

Symbol: __WHILE_IS_NOT_END_WALL
   Definitions
      At line 140 in file RD_BV_MAIN.s
   Uses
      At line 67 in file RD_BV_MAIN.s
Comment: __WHILE_IS_NOT_END_WALL used once
__main 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: __main
   Definitions
      At line 55 in file RD_BV_MAIN.s
   Uses
      At line 6 in file RD_BV_MAIN.s
Comment: __main used once
basic_wall_is_bumped 000000B2

Symbol: basic_wall_is_bumped
   Definitions
      At line 177 in file RD_BV_MAIN.s
   Uses
      None
Comment: basic_wall_is_bumped unused
end_p 000000D2

Symbol: end_p
   Definitions
      At line 197 in file RD_BV_MAIN.s
   Uses
      At line 74 in file RD_BV_MAIN.s
Comment: end_p used once
end_wall_is_bumped 00000098

Symbol: end_wall_is_bumped
   Definitions
      At line 163 in file RD_BV_MAIN.s
   Uses
      None
Comment: end_wall_is_bumped unused
end_while_is_not_end_wall 000000CE

Symbol: end_while_is_not_end_wall
   Definitions
      At line 193 in file RD_BV_MAIN.s
   Uses
      At line 165 in file RD_BV_MAIN.s
      At line 168 in file RD_BV_MAIN.s

end_while_is_start_wall 00000014

Symbol: end_while_is_start_wall
   Definitions
      At line 66 in file RD_BV_MAIN.s
   Uses
      At line 61 in file RD_BV_MAIN.s
Comment: end_while_is_start_wall used once
init_startup_while_var 00000070

Symbol: init_startup_while_var
   Definitions
      At line 142 in file RD_BV_MAIN.s
   Uses
      None
Comment: init_startup_while_var unused
move_to_the_left 0000007C

Symbol: move_to_the_left



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 149 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_left unused
move_to_the_up 000000A4

Symbol: move_to_the_up
   Definitions
      At line 169 in file RD_BV_MAIN.s
   Uses
      None
Comment: move_to_the_up unused
save_1_binary 000000C0

Symbol: save_1_binary
   Definitions
      At line 185 in file RD_BV_MAIN.s
   Uses
      At line 179 in file RD_BV_MAIN.s
      At line 182 in file RD_BV_MAIN.s

shift_binary_mask 000000C4

Symbol: shift_binary_mask
   Definitions
      At line 188 in file RD_BV_MAIN.s
   Uses
      At line 183 in file RD_BV_MAIN.s
Comment: shift_binary_mask used once
start_while_is_not_end_wall 0000007C

Symbol: start_while_is_not_end_wall
   Definitions
      At line 147 in file RD_BV_MAIN.s
   Uses
      At line 191 in file RD_BV_MAIN.s
Comment: start_while_is_not_end_wall used once
start_while_is_start_wall 00000008

Symbol: start_while_is_start_wall
   Definitions
      At line 59 in file RD_BV_MAIN.s
   Uses
      At line 64 in file RD_BV_MAIN.s
Comment: start_while_is_start_wall used once
sw1 00000018

Symbol: sw1
   Definitions
      At line 70 in file RD_BV_MAIN.s
   Uses
      At line 72 in file RD_BV_MAIN.s
Comment: sw1 used once
sw2 0000002C

Symbol: sw2
   Definitions
      At line 86 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 88 in file RD_BV_MAIN.s
Comment: sw2 used once
wait_to_be_outside_range_X 00000092

Symbol: wait_to_be_outside_range_X
   Definitions
      At line 160 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_X unused
wait_to_be_outside_range_Y_DOWN 00000084

Symbol: wait_to_be_outside_range_Y_DOWN
   Definitions
      At line 153 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_DOWN unused
wait_to_be_outside_range_Y_UP 000000AC

Symbol: wait_to_be_outside_range_Y_UP
   Definitions
      At line 173 in file RD_BV_MAIN.s
   Uses
      None
Comment: wait_to_be_outside_range_Y_UP unused
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

TEMPS_X 00A037A0

Symbol: TEMPS_X
   Definitions
      At line 1 in file RD_BV_MAIN.s
   Uses
      At line 100 in file RD_BV_MAIN.s
Comment: TEMPS_X used once
TEMPS_Y 00A037A0

Symbol: TEMPS_Y
   Definitions
      At line 2 in file RD_BV_MAIN.s
   Uses
      At line 101 in file RD_BV_MAIN.s
Comment: TEMPS_Y used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__BLINK_LED_1_2 00000000

Symbol: __BLINK_LED_1_2
   Definitions
      At line 47 in file RD_BV_MAIN.s
   Uses
      None
Comment: __BLINK_LED_1_2 unused
__CONFIG_BUMPER 00000000

Symbol: __CONFIG_BUMPER
   Definitions
      At line 35 in file RD_BV_MAIN.s
   Uses
      At line 57 in file RD_BV_MAIN.s
Comment: __CONFIG_BUMPER used once
__CONFIG_LED 00000000

Symbol: __CONFIG_LED
   Definitions
      At line 40 in file RD_BV_MAIN.s
   Uses
      None
Comment: __CONFIG_LED unused
__CONFIG_SW 00000000

Symbol: __CONFIG_SW
   Definitions
      At line 30 in file RD_BV_MAIN.s
   Uses
      At line 84 in file RD_BV_MAIN.s
Comment: __CONFIG_SW used once
__ENGINE_INIT 00000000

Symbol: __ENGINE_INIT
   Definitions
      At line 10 in file RD_BV_MAIN.s
   Uses
      At line 83 in file RD_BV_MAIN.s
Comment: __ENGINE_INIT used once
__ENGINE_LEFT_BACK 00000000

Symbol: __ENGINE_LEFT_BACK
   Definitions
      At line 19 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_BACK unused
__ENGINE_LEFT_BACK_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_BACK_RIGHT_FRONT
   Definitions
      At line 25 in file RD_BV_MAIN.s
   Uses
      At line 121 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_BACK_RIGHT_FRONT used once
__ENGINE_LEFT_FRONT 00000000

Symbol: __ENGINE_LEFT_FRONT



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 18 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_FRONT unused
__ENGINE_LEFT_FRONT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_FRONT_RIGHT_BACK
   Definitions
      At line 26 in file RD_BV_MAIN.s
   Uses
      At line 111 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_FRONT_RIGHT_BACK used once
__ENGINE_LEFT_INVERSE 00000000

Symbol: __ENGINE_LEFT_INVERSE
   Definitions
      At line 20 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_INVERSE unused
__ENGINE_LEFT_OFF 00000000

Symbol: __ENGINE_LEFT_OFF
   Definitions
      At line 17 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_OFF unused
__ENGINE_LEFT_ON 00000000

Symbol: __ENGINE_LEFT_ON
   Definitions
      At line 16 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_ON unused
__ENGINE_LEFT_RIGHT_BACK 00000000

Symbol: __ENGINE_LEFT_RIGHT_BACK
   Definitions
      At line 24 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_BACK unused
__ENGINE_LEFT_RIGHT_FRONT 00000000

Symbol: __ENGINE_LEFT_RIGHT_FRONT
   Definitions
      At line 23 in file RD_BV_MAIN.s
   Uses
      At line 91 in file RD_BV_MAIN.s
      At line 151 in file RD_BV_MAIN.s
      At line 158 in file RD_BV_MAIN.s
      At line 171 in file RD_BV_MAIN.s

__ENGINE_LEFT_RIGHT_INVERSE 00000000

Symbol: __ENGINE_LEFT_RIGHT_INVERSE



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
External symbols

   Definitions
      At line 27 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_INVERSE unused
__ENGINE_LEFT_RIGHT_OFF 00000000

Symbol: __ENGINE_LEFT_RIGHT_OFF
   Definitions
      At line 22 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_LEFT_RIGHT_OFF unused
__ENGINE_LEFT_RIGHT_ON 00000000

Symbol: __ENGINE_LEFT_RIGHT_ON
   Definitions
      At line 21 in file RD_BV_MAIN.s
   Uses
      At line 90 in file RD_BV_MAIN.s
Comment: __ENGINE_LEFT_RIGHT_ON used once
__ENGINE_RIGHT_BACK 00000000

Symbol: __ENGINE_RIGHT_BACK
   Definitions
      At line 14 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_BACK unused
__ENGINE_RIGHT_FRONT 00000000

Symbol: __ENGINE_RIGHT_FRONT
   Definitions
      At line 13 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_FRONT unused
__ENGINE_RIGHT_INVERSE 00000000

Symbol: __ENGINE_RIGHT_INVERSE
   Definitions
      At line 15 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_INVERSE unused
__ENGINE_RIGHT_OFF 00000000

Symbol: __ENGINE_RIGHT_OFF
   Definitions
      At line 12 in file RD_BV_MAIN.s
   Uses
      None
Comment: __ENGINE_RIGHT_OFF unused
__ENGINE_RIGHT_ON 00000000

Symbol: __ENGINE_RIGHT_ON
   Definitions
      At line 11 in file RD_BV_MAIN.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
External symbols

      None
Comment: __ENGINE_RIGHT_ON unused
__READ_STATE_BUMPER_1 00000000

Symbol: __READ_STATE_BUMPER_1
   Definitions
      At line 36 in file RD_BV_MAIN.s
   Uses
      At line 60 in file RD_BV_MAIN.s
      At line 164 in file RD_BV_MAIN.s
      At line 178 in file RD_BV_MAIN.s

__READ_STATE_BUMPER_2 00000000

Symbol: __READ_STATE_BUMPER_2
   Definitions
      At line 37 in file RD_BV_MAIN.s
   Uses
      At line 63 in file RD_BV_MAIN.s
      At line 167 in file RD_BV_MAIN.s
      At line 181 in file RD_BV_MAIN.s

__READ_STATE_SW_1 00000000

Symbol: __READ_STATE_SW_1
   Definitions
      At line 31 in file RD_BV_MAIN.s
   Uses
      At line 71 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_1 used once
__READ_STATE_SW_2 00000000

Symbol: __READ_STATE_SW_2
   Definitions
      At line 32 in file RD_BV_MAIN.s
   Uses
      At line 87 in file RD_BV_MAIN.s
Comment: __READ_STATE_SW_2 used once
__SWITCH_OFF_LED_1 00000000

Symbol: __SWITCH_OFF_LED_1
   Definitions
      At line 44 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_OFF_LED_1 unused
__SWITCH_OFF_LED_1_2 00000000

Symbol: __SWITCH_OFF_LED_1_2
   Definitions
      At line 46 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_OFF_LED_1_2 unused
__SWITCH_OFF_LED_2 00000000

Symbol: __SWITCH_OFF_LED_2
   Definitions
      At line 45 in file RD_BV_MAIN.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
External symbols

   Uses
      None
Comment: __SWITCH_OFF_LED_2 unused
__SWITCH_ON_LED_1 00000000

Symbol: __SWITCH_ON_LED_1
   Definitions
      At line 41 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_1 unused
__SWITCH_ON_LED_1_2 00000000

Symbol: __SWITCH_ON_LED_1_2
   Definitions
      At line 43 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_1_2 unused
__SWITCH_ON_LED_2 00000000

Symbol: __SWITCH_ON_LED_2
   Definitions
      At line 42 in file RD_BV_MAIN.s
   Uses
      None
Comment: __SWITCH_ON_LED_2 unused
__WAIT_A_TIME 00000000

Symbol: __WAIT_A_TIME
   Definitions
      At line 51 in file RD_BV_MAIN.s
   Uses
      At line 155 in file RD_BV_MAIN.s
      At line 162 in file RD_BV_MAIN.s
      At line 175 in file RD_BV_MAIN.s

__WAIT_HALF_ROTATION 00000000

Symbol: __WAIT_HALF_ROTATION
   Definitions
      At line 50 in file RD_BV_MAIN.s
   Uses
      At line 112 in file RD_BV_MAIN.s
      At line 122 in file RD_BV_MAIN.s

34 symbols
397 symbols in table
